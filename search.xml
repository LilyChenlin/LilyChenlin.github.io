<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>读ucf-scripts脚手架源码</title>
    <url>/2022/01/17/%E8%AF%BBucf-scripts%E8%84%9A%E6%89%8B%E6%9E%B6%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>ucf-scripts是bip平台统一的前端工程脚手架。</p>
<span id="more"></span>


<h1 id="2-目录"><a href="#2-目录" class="headerlink" title="2. 目录"></a>2. 目录</h1><p><img src="1.png" alt="目录"></p>
<p>目录文件说明</p>
<ol>
<li>base.config.js 基础配置文件</li>
<li>start.js 本地起服务入口文件</li>
<li>build.js 打包服务入口文件</li>
<li>start.config.js 本地起服务配置文件</li>
<li>build.config.js 打包配置文件</li>
<li>utils.js 工具方法</li>
</ol>
<h1 id="3-Plugins插件"><a href="#3-Plugins插件" class="headerlink" title="3. Plugins插件"></a>3. Plugins插件</h1><h2 id="3-1-start-config-js"><a href="#3-1-start-config-js" class="headerlink" title="3.1 start.config.js"></a>3.1 start.config.js</h2><h3 id="3-1-1-open-browser-plugin"><a href="#3-1-1-open-browser-plugin" class="headerlink" title="3.1.1. open-browser-plugin"></a>3.1.1. open-browser-plugin</h3><p>项目启动后自动打开浏览器</p>
<h3 id="3-1-2-html-webpack-plugin"><a href="#3-1-2-html-webpack-plugin" class="headerlink" title="3.1.2. html-webpack-plugin"></a>3.1.2. html-webpack-plugin</h3><p>html-webpack-plugin 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="2.png" alt="htmlWebpackPlugin配置"></p>
<ul>
<li>说明<ol>
<li>filename 生成的模版文件的名字</li>
<li>template 模版来源文件</li>
<li>inject 引入模板的注入位置，取值有true/false/body/head <ul>
<li>true：默认值，script标签位于html文件的body底部</li>
<li>body:script标签位于html文件的body底部</li>
<li>head:script标签位于html文件的head中</li>
<li>false:不插入生成的js文件，这个几乎不会用到</li>
</ul>
</li>
<li>chunks 引入的模块，这里指定的是entry中设置多个js时，在这里指定引入的js，如果不设置则默认全部引入</li>
<li>hash <ul>
<li>true 打包生成的html文件引入的js/css带有hash值</li>
</ul>
</li>
<li>static_url</li>
</ol>
</li>
<li>困惑解析使用require.resolve函数来查询某个模块文件的带有完整绝对路径的文件名<ol>
<li>require.resolve(url)</li>
</ol>
</li>
</ul>
<h3 id="3-1-3-HotModuleReplacementPlugin"><a href="#3-1-3-HotModuleReplacementPlugin" class="headerlink" title="3.1.3. HotModuleReplacementPlugin"></a>3.1.3. HotModuleReplacementPlugin</h3><p>热更新模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    ...HtmlPlugin</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-DefinePlugin"><a href="#3-1-4-DefinePlugin" class="headerlink" title="3.1.4. DefinePlugin"></a>3.1.4. DefinePlugin</h3><p>允许在 <strong>编译时</strong> 将你代码中的变量替换为其他值或表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//环境变量注入</span></span><br><span class="line">cfg.global_env &amp;&amp; (config.plugins = config.plugins.concat(<span class="keyword">new</span> webpack.DefinePlugin(cfg.global_env)));</span><br></pre></td></tr></table></figure>

<h3 id="3-1-5-tinper-next-plugin"><a href="#3-1-5-tinper-next-plugin" class="headerlink" title="3.1.5. @tinper/next-plugin"></a>3.1.5. @tinper/next-plugin</h3><p>统一前端三方包接入Plugin</p>
<h2 id="3-2-base-config-js"><a href="#3-2-base-config-js" class="headerlink" title="3.2. base.config.js"></a>3.2. base.config.js</h2><h3 id="3-2-1-BannerPlugin"><a href="#3-2-1-BannerPlugin" class="headerlink" title="3.2.1. BannerPlugin"></a>3.2.1. BannerPlugin</h3><p>webpack内置Plugin，在打包好的js文件最开始处添加版权声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">        <span class="attr">banner</span>: <span class="string">`File:[file] Date:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-mini-css-extract-plugin"><a href="#3-2-2-mini-css-extract-plugin" class="headerlink" title="3.2.2. mini-css-extract-plugin"></a>3.2.2. mini-css-extract-plugin</h3><p>原本的状态是css-in-js，使用该插件后可以将css单独打包成一个文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">            <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">            <span class="attr">ignoreOrder</span>: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-ProgressPlugin"><a href="#3-2-3-ProgressPlugin" class="headerlink" title="3.2.3. ProgressPlugin"></a>3.2.3. ProgressPlugin</h3><p>webpack构建进度条。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProgressPlugin()</span><br></pre></td></tr></table></figure>

<h2 id="3-3-build-config-js"><a href="#3-3-build-config-js" class="headerlink" title="3.3 build.config.js"></a>3.3 build.config.js</h2><h3 id="3-3-1-CleanWebpackPlugin"><a href="#3-3-1-CleanWebpackPlugin" class="headerlink" title="3.3.1. CleanWebpackPlugin"></a>3.3.1. CleanWebpackPlugin</h3><p>删除指定目录下的文件。在项目中主要用来在每一次编译前，先删除上一次编译完后的代码。</p>
<h3 id="3-3-2-OptimizeCSSAssetsPlugin"><a href="#3-3-2-OptimizeCSSAssetsPlugin" class="headerlink" title="3.3.2. OptimizeCSSAssetsPlugin"></a>3.3.2. OptimizeCSSAssetsPlugin</h3><p>压缩css代码</p>
<h3 id="3-3-3-TerserWebpackPlugin"><a href="#3-3-3-TerserWebpackPlugin" class="headerlink" title="3.3.3. TerserWebpackPlugin"></a>3.3.3. TerserWebpackPlugin</h3><ol>
<li>webpack5已内置该插件，但webpack v4并没有内置。</li>
<li>该插件使用 <a href="https://github.com/terser/terser">terser</a> 来压缩 JavaScript。</li>
</ol>
<h3 id="3-3-4-html-webpack-plugin"><a href="#3-3-4-html-webpack-plugin" class="headerlink" title="3.3.4. html-webpack-plugin"></a>3.3.4. html-webpack-plugin</h3><h3 id="3-3-5-TNSClientPlugin"><a href="#3-3-5-TNSClientPlugin" class="headerlink" title="3.3.5. TNSClientPlugin"></a>3.3.5. TNSClientPlugin</h3><h1 id="4-Loader"><a href="#4-Loader" class="headerlink" title="4. Loader"></a>4. Loader</h1><ol>
<li>loader的顺序是从下往上，从右往左</li>
</ol>
<h2 id="4-1-start-config-js"><a href="#4-1-start-config-js" class="headerlink" title="4.1. start.config.js"></a>4.1. start.config.js</h2><h3 id="无"><a href="#无" class="headerlink" title="无"></a>无</h3><h2 id="4-2-base-config-js"><a href="#4-2-base-config-js" class="headerlink" title="4.2. base.config.js"></a>4.2. base.config.js</h2><h3 id="4-2-1-babel-loader"><a href="#4-2-1-babel-loader" class="headerlink" title="4.2.1. babel-loader"></a>4.2.1. babel-loader</h3><p>babel-loader可以将ES6、ES7等一些浏览器不支持的高级语法编译成浏览器可以识别的ES5语法。</p>
<h3 id="4-2-2-css-loader"><a href="#4-2-2-css-loader" class="headerlink" title="4.2.2. css-loader"></a>4.2.2. css-loader</h3><p>对@import和url()进行处理，就像js解析import/require()一样。</p>
<h3 id="4-2-3-postcss-loader"><a href="#4-2-3-postcss-loader" class="headerlink" title="4.2.3. postcss-loader"></a>4.2.3. postcss-loader</h3><p>进一步处理css文件，比如添加浏览器前缀，压缩CSS等。</p>
<h3 id="4-2-4-less-loader"><a href="#4-2-4-less-loader" class="headerlink" title="4.2.4. less-loader"></a>4.2.4. less-loader</h3><p>将Less编译成css</p>
<h3 id="4-2-5-style-loader"><a href="#4-2-5-style-loader" class="headerlink" title="4.2.5. style-loader"></a>4.2.5. style-loader</h3><p>将css插入到dom中，但是我们一般会使用MiniCSSExtractPlugin将CSS打包成独立的css文件，并通过HtmlWebpackPlugin引入css文件，所以可以不用这个loader</p>
<h3 id="4-2-6-url-loader"><a href="#4-2-6-url-loader" class="headerlink" title="4.2.6. url-loader"></a>4.2.6. url-loader</h3><p> 将文件作为 data URI 内联到 bundle 中</p>
<h3 id="4-2-7-file-loader"><a href="#4-2-7-file-loader" class="headerlink" title="4.2.7. file-loader"></a>4.2.7. file-loader</h3><p>将文件发送到输出目录</p>
<h2 id="4-3-build-config-js"><a href="#4-3-build-config-js" class="headerlink" title="4.3 build.config.js"></a>4.3 build.config.js</h2><h3 id="无-1"><a href="#无-1" class="headerlink" title="无"></a>无</h3><h1 id="5-Middleware"><a href="#5-Middleware" class="headerlink" title="5. Middleware"></a>5. Middleware</h1><h2 id="5-1-start-config-js"><a href="#5-1-start-config-js" class="headerlink" title="5.1 start.config.js"></a>5.1 start.config.js</h2><h3 id="5-1-1-http-proxy-middleware"><a href="#5-1-1-http-proxy-middleware" class="headerlink" title="5.1.1. http-proxy-middleware"></a>5.1.1. http-proxy-middleware</h3><p>代理中间件，用于转发请求，将客户端发送的请求数据转发到目标服务器，再将响应输送到客户端。</p>
<h3 id="5-1-2-webpack-dev-middleware"><a href="#5-1-2-webpack-dev-middleware" class="headerlink" title="5.1.2. webpack-dev-middleware"></a>5.1.2. webpack-dev-middleware</h3><p>生成一个与webpack的compiler绑定的中间件，在express启动的服务app中调用这个中间件。<br><img src="3.png" alt="devMiddleware"><br>作用</p>
<ol>
<li>通过watch mode，监听资源的变更，自动打包</li>
<li>快速编译，走内存 ！！！</li>
<li>返回中间件，支持express的use格式</li>
</ol>
<h3 id="5-1-3-webpack-hot-middleware"><a href="#5-1-3-webpack-hot-middleware" class="headerlink" title="5.1.3. webpack-hot-middleware"></a>5.1.3. webpack-hot-middleware</h3><p>实现页面热更新，一般与webpack-dev-middleware配合使用<br><img src="4.png" alt="hotMiddleware"></p>
<h1 id="6-分析"><a href="#6-分析" class="headerlink" title="6. 分析"></a>6. 分析</h1><p><strong>本地起服务走start.js, 编译走build.js。</strong><br><strong>​</strong></p>
<h2 id="6-1-base-config-js"><a href="#6-1-base-config-js" class="headerlink" title="6.1 base.config.js"></a>6.1 base.config.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">	<span class="attr">output</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">module</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">plugins</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-1-output"><a href="#6-1-1-output" class="headerlink" title="6.1.1. output"></a>6.1.1. output</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置webpack如何输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, dist_root, _context), <span class="comment">// 输出路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// bundle名称</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// 非初始chunk文件的名称</span></span><br><span class="line">        <span class="attr">publicPath</span>: cfg.publicPath ? <span class="string">&#x27;/&#x27;</span> + _context : <span class="literal">undefined</span>, <span class="comment">// 在浏览器中所引用的「此输出目录对应的公开 URL」</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="comment">// The environment supports arrow functions (&#x27;() =&gt; &#123; ... &#125;&#x27;).</span></span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports BigInt as literal (123n).</span></span><br><span class="line">            <span class="attr">bigIntLiteral</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports const and let for variable declarations.</span></span><br><span class="line">            <span class="attr">const</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports destructuring (&#x27;&#123; a, b &#125; = obj&#x27;).</span></span><br><span class="line">            <span class="attr">destructuring</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports an async import() function to import EcmaScript modules.</span></span><br><span class="line">            <span class="attr">dynamicImport</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports &#x27;for of&#x27; iteration (&#x27;for (const x of array) &#123; ... &#125;&#x27;).</span></span><br><span class="line">            <span class="attr">forOf</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// The environment supports ECMAScript Module syntax to import ECMAScript modules (import ... from &#x27;...&#x27;).</span></span><br><span class="line">            <span class="attr">module</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-2-module"><a href="#6-1-2-module" class="headerlink" title="6.1.2. module"></a>6.1.2. module</h3><ol>
<li>使用相对应的loader对js/less/css/图片/图标字体/svg等做处理编译</li>
</ol>
<h3 id="6-1-3-resolve"><a href="#6-1-3-resolve" class="headerlink" title="6.1.3. resolve"></a>6.1.3. resolve</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">	<span class="attr">resolve</span>: &#123;</span><br><span class="line">    		<span class="comment">// 尝试按顺序解析这些后缀名。如果有多个文件有相同的名字，但后缀名不同，webpack 会解析列在数组首位的后缀的文件 并跳过其余的后缀。</span></span><br><span class="line">        <span class="attr">extensions</span>: [</span><br><span class="line">            <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.less&quot;</span>, <span class="string">&quot;.css&quot;</span>, <span class="string">&quot;.json&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// 别名配置</span></span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;ucf-apps&#x27;</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;ucf-apps/&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;ucf-common&#x27;</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;ucf-common/src/&#x27;</span>),</span><br><span class="line">            <span class="attr">components</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;ucf-common/src/components/&#x27;</span>),</span><br><span class="line">            <span class="attr">static</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;ucf-common/src/static/&#x27;</span>),</span><br><span class="line">            <span class="attr">utils</span>: path.resolve(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;ucf-common/src/utils/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-plugins"><a href="#6-1-4-plugins" class="headerlink" title="6.1.4. plugins"></a>6.1.4. plugins</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">            <span class="attr">banner</span>: <span class="string">`File:[file] Date:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">            <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">            <span class="attr">ignoreOrder</span>: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProgressPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-start-js"><a href="#6-2-start-js" class="headerlink" title="6.2 start.js"></a>6.2 start.js</h2><ol>
<li>本地起服务的时候，调用server方法，并传入{port, ip}</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getPort = <span class="built_in">require</span>(<span class="string">&#x27;get-port&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ip = <span class="built_in">require</span>(<span class="string">&#x27;ip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置默认端口</span></span><br><span class="line">        <span class="comment">// 检测是否被占用，更换端口，启动调试服务</span></span><br><span class="line">        getPort(&#123;</span><br><span class="line">            <span class="attr">port</span>: commands.port || <span class="number">3000</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">port</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 启动服务</span></span><br><span class="line">            server(&#123;</span><br><span class="line">                port,</span><br><span class="line">                <span class="attr">ip</span>: ip.address()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>server方法定义如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./start.config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig);</span><br><span class="line"></span><br><span class="line">server = <span class="function"><span class="params">opt</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用webpack-dev-middleware生成一个和webpack的compiler绑定的中间件</span></span><br><span class="line">    <span class="keyword">const</span> instance = devMiddleware(compiler, &#123;</span><br><span class="line">        <span class="attr">publicPath</span>: webpackConfig.output.publicPath,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Ucf-Server&#x27;</span>: util.getPkg().version</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">stats</span>: &#123;</span><br><span class="line">            <span class="attr">colors</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">hash</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">children</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">chunks</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 静态资源托管</span></span><br><span class="line">    cfg.static &amp;&amp; app.use((cfg.context == <span class="string">&#x27;&#x27;</span> || cfg.context == <span class="literal">undefined</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="string">`/<span class="subst">$&#123;cfg.context&#125;</span>`</span>, express.static(path.resolve(<span class="string">&quot;.&quot;</span>, cfg.static)));</span><br><span class="line">    <span class="comment">// 加载实例</span></span><br><span class="line">    app.use(instance);</span><br><span class="line">    <span class="comment">// 热更新</span></span><br><span class="line">    app.use(hotMiddleware(compiler));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载代理插件</span></span><br><span class="line">    <span class="comment">// 处理proxy数组情况</span></span><br><span class="line">    cfg.proxy &amp;&amp; cfg.proxy.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.enable) &#123;<span class="comment">// 代理开启</span></span><br><span class="line">            <span class="comment">// 默认配置项</span></span><br><span class="line">            <span class="keyword">let</span> proxyOpt = &#123;</span><br><span class="line">                <span class="attr">target</span>: element.url,</span><br><span class="line">                <span class="attr">logLevel</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: <span class="built_in">Object</span>.assign(&#123;&#125;, element.pathRewrite),</span><br><span class="line">                <span class="attr">headers</span>: (<span class="keyword">typeof</span> element.headers !== <span class="string">&#x27;undefined&#x27;</span> ? element.headers : &#123;&#125;),</span><br><span class="line">                <span class="attr">onProxyRes</span>: <span class="function"><span class="keyword">function</span> (<span class="params">proxyRes</span>) </span>&#123;</span><br><span class="line">                    proxyRes.headers[<span class="string">&quot;Ucf-Proxy&quot;</span>] = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            app.use(element.router, createProxyMiddleware(element.opts || proxyOpt));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 运行调试服务</span></span><br><span class="line">    app.listen(opt.port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">`----------------------------------------------------`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.yellow(<span class="string">`\t 🚀 UCF Develop Server`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">`\t [Server Version]: 🏅 <span class="subst">$&#123;util.getPkg().version&#125;</span>`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">`\t [Local]         : 🏠 http://<span class="subst">$&#123;browserHost&#125;</span>:<span class="subst">$&#123;opt.port&#125;</span>`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">`\t [Lan]           : 📡 http://<span class="subst">$&#123;opt.ip&#125;</span>:<span class="subst">$&#123;opt.port&#125;</span>`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">`----------------------------------------------------`</span>));</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-start-config-js"><a href="#6-3-start-config-js" class="headerlink" title="6.3 start.config.js"></a>6.3 start.config.js</h2><ol>
<li>大致的配置，会与base.config.js合并。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>);</span><br><span class="line"><span class="comment">//默认的配置用于merge操作</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">externals</span>: cfg.externals, <span class="comment">// 构建排除指定包</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123; </span><br><span class="line">        <span class="attr">alias</span>: cfg.alias <span class="comment">// 别名配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: cfg.loader <span class="comment">// loader配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// 热更新Plugin</span></span><br><span class="line">        ...HtmlPlugin <span class="comment">// 查看第2点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line">config.entry = entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">//环境变量注入</span></span><br><span class="line">cfg.global_env &amp;&amp; (config.plugins = config.plugins.concat(<span class="keyword">new</span> webpack.DefinePlugin(cfg.global_env)));</span><br><span class="line"><span class="comment">//传入插件设置</span></span><br><span class="line">cfg.devPlugins &amp;&amp; (config.plugins = config.plugins.concat(cfg.devPlugins));</span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, config);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>HtmlPlugin的相关配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlPlugin = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否加载默认页面打开浏览器</span></span><br><span class="line"><span class="keyword">if</span> (commands.homepage) &#123;</span><br><span class="line">    HtmlPlugin.push(<span class="keyword">new</span> OpenBrowserPlugin(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`http://<span class="subst">$&#123;browserHost&#125;</span>:<span class="subst">$&#123;commands.port || <span class="number">3000</span>&#125;</span>/<span class="subst">$&#123;commands.homepage || <span class="string">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载本地开发环境的Portal</span></span><br><span class="line">glob.sync(<span class="string">&#x27;./ucf-common/src/portal/src/app.js&#x27;</span>).forEach(<span class="function"><span class="params">_path</span> =&gt;</span> &#123;</span><br><span class="line">    entries[<span class="string">&#x27;index&#x27;</span>] = <span class="string">&#x27;./ucf-common/src/portal/src/app.js&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> htmlConf = &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">`index.html`</span>,</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;./ucf-common/src/portal/src/index.html&#x27;</span>,</span><br><span class="line">        <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">        <span class="attr">hash</span>: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    HtmlPlugin.push(<span class="keyword">new</span> HtmlWebPackPlugin(htmlConf));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造模块加载入口以及html出口</span></span><br><span class="line">bootFiles.forEach(<span class="function"><span class="params">_path</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 获取上下文</span></span><br><span class="line">    <span class="keyword">let</span> _context = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!cfg.publicPath &amp;&amp; cfg.context) &#123;</span><br><span class="line">        _context = <span class="string">`<span class="subst">$&#123;cfg.context&#125;</span>/`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模块名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">module</span> = _path.split(<span class="string">`./<span class="subst">$&#123;scan_root&#125;</span>/`</span>)[<span class="number">1</span>].split(<span class="string">`/src/<span class="subst">$&#123;bootName&#125;</span>`</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> chunk = <span class="string">`<span class="subst">$&#123;_context&#125;</span><span class="subst">$&#123;<span class="built_in">module</span>&#125;</span>/index`</span>; <span class="comment">// 拼接结果&#x27;iuap-mdm-ucf/association/index&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> targetDir = _path.split(<span class="string">`/<span class="subst">$&#123;bootName&#125;</span>`</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兼容其他类型的模版配置，如：ejs</span></span><br><span class="line">    <span class="keyword">const</span> templateType = cfg.templateType ? cfg.templateType : <span class="string">&#x27;html&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> htmlConf = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;chunk&#125;</span>.html`</span>,</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/index.<span class="subst">$&#123;templateType&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [chunk],</span><br><span class="line">        <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">static_url</span>: cfg.static_url ? cfg.static_url : <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    &#125;,HtmlPluginConf);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//处理启动器逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (bootList &amp;&amp; <span class="keyword">typeof</span> bootList == <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">        entries[chunk] = [_path, <span class="built_in">require</span>.resolve(<span class="string">&#x27;./webpack-hot-middleware/client&#x27;</span>)];</span><br><span class="line">        HtmlPlugin.push(<span class="keyword">new</span> HtmlWebPackPlugin(htmlConf));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(bootList) &amp;&amp; bootList.length &gt; <span class="number">0</span>) &#123; <span class="comment">// 多入口</span></span><br><span class="line">        bootList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            _bootList.add(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (_bootList.has(<span class="built_in">module</span>)) &#123;</span><br><span class="line">            entries[chunk] = [_path, <span class="built_in">require</span>.resolve(<span class="string">&#x27;./webpack-hot-middleware/client&#x27;</span>)];</span><br><span class="line">            HtmlPlugin.push(<span class="keyword">new</span> HtmlWebPackPlugin(htmlConf));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一前端三方包接入TNS</span></span><br><span class="line"><span class="keyword">if</span> (tnsEnabled) &#123;</span><br><span class="line">    HtmlPlugin.push(<span class="keyword">new</span> TNSClientPlugin(&#123;<span class="attr">libraryDebug</span>: <span class="literal">true</span>, ...tnsDetailCfg&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-build-js"><a href="#6-4-build-js" class="headerlink" title="6.4 build.js"></a>6.4 build.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./build.config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动构建</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugin</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用build方法</span></span><br><span class="line">build = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">`--------------------------------------------`</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(<span class="string">`\t 🚀  UCF Build Server`</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">`\t [Build Version] : 🏅 <span class="subst">$&#123;util.getPkg().version&#125;</span>`</span>));</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">`\t 💪 Good Luck Please Wait ☃️`</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">`--------------------------------------------`</span>));</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    compiler.run(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;\n&#x27;</span> + stats.toString(&#123;</span><br><span class="line">                <span class="attr">hash</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">chunks</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">children</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">colors</span>: <span class="literal">true</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.red(err));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-build-config-js"><a href="#6-5-build-config-js" class="headerlink" title="6.5. build.config.js"></a>6.5. build.config.js</h2><ol>
<li>大致的配置，会与base.config.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    output,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">    <span class="attr">externals</span>: cfg.externals,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: cfg.alias</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: cfg.loader</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="comment">// 不使用内部压缩参数关闭</span></span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">            <span class="attr">cssProcessorOptions</span>: &#123;</span><br><span class="line">                <span class="attr">safe</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">mergeLonghand</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">canPrint</span>: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">            <span class="comment">// test: /\.js(\?.*)?$/i,</span></span><br><span class="line">            <span class="comment">// cache: true,</span></span><br><span class="line">            <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// sourceMap: cfg.open_source_map == undefined ? true : cfg.open_source_map</span></span><br><span class="line">            <span class="comment">// include:&#x27;vendor&#x27;,</span></span><br><span class="line">            <span class="comment">// exclude:&#x27;vendor&#x27;,</span></span><br><span class="line">        &#125;),</span><br><span class="line">        ...HtmlPlugin <span class="comment">// 查看2点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口</span></span><br><span class="line">config.entry = entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境变量注入</span></span><br><span class="line">cfg.global_env &amp;&amp; (config.plugins = config.plugins.concat(<span class="keyword">new</span> webpack.DefinePlugin(cfg.global_env)));</span><br><span class="line"><span class="comment">// 传入插件设置</span></span><br><span class="line">cfg.buildPlugins &amp;&amp; (config.plugins = config.plugins.concat(cfg.buildPlugins));</span><br><span class="line"><span class="comment">// 是否启用优化资源单独生成文件</span></span><br><span class="line">cfg.res_extra &amp;&amp; (cfg.splitChunks ? config.optimization[<span class="string">&#x27;splitChunks&#x27;</span>] = cfg.splitChunks : config.optimization[<span class="string">&#x27;splitChunks&#x27;</span>] = splitChunks);</span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, config);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>HtmlPlugin</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlPlugin = [];</span><br><span class="line"></span><br><span class="line">bootFiles.forEach(<span class="function"><span class="params">_path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//模块名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">module</span> = _path.split(<span class="string">`./<span class="subst">$&#123;scan_root&#125;</span>/`</span>)[<span class="number">1</span>].split(<span class="string">`/src/<span class="subst">$&#123;bootName&#125;</span>`</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> chunk = <span class="string">`<span class="subst">$&#123;<span class="built_in">module</span>&#125;</span>/index`</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> targetDir = _path.split(<span class="string">`/<span class="subst">$&#123;bootName&#125;</span>`</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 兼容其他类型的模版配置，如：ejs</span></span><br><span class="line">    <span class="keyword">const</span> templateType = cfg.templateType ? cfg.templateType : <span class="string">&#x27;html&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> htmlConf = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;chunk&#125;</span>.html`</span>,</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/index.<span class="subst">$&#123;templateType&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>, chunk],</span><br><span class="line">        <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">static_url</span>: cfg.static_url ? cfg.static_url : <span class="string">&#x27;&#x27;</span> </span><br><span class="line">        &#125;,HtmlPluginConf) ;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//处理启动器逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (bootList &amp;&amp; <span class="keyword">typeof</span> bootList == <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">        entries[chunk] = _path;</span><br><span class="line">        HtmlPlugin.push(<span class="keyword">new</span> HtmlWebPackPlugin(htmlConf));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(bootList) &amp;&amp; bootList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        bootList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            _bootList.add(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (_bootList.has(<span class="built_in">module</span>)) &#123;</span><br><span class="line">            entries[chunk] = _path;</span><br><span class="line">            HtmlPlugin.push(<span class="keyword">new</span> HtmlWebPackPlugin(htmlConf));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tnsEnabled) &#123;</span><br><span class="line">    HtmlPlugin.push(<span class="keyword">new</span> TNSClientPlugin(&#123;excludeModules&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其他配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// output输出的文件添加hash值实现缓存</span></span><br><span class="line"><span class="keyword">const</span> output = cfg.hasHash ? &#123;</span><br><span class="line">    ...base.output,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash].js&#x27;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].[hash].js&#x27;</span>,</span><br><span class="line">&#125; : base.output;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// splitChunks进行代码分离，避免加载重复代码</span></span><br><span class="line"><span class="keyword">let</span> splitChunks = &#123;</span><br><span class="line">    <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">            <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//打包重复出现的代码</span></span><br><span class="line">        <span class="attr">vendor</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">maxInitialRequests</span>: <span class="number">5</span>, <span class="comment">// The default limit is too small to showcase the effect</span></span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// This is example is too small to create commons chunks</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//打包第三方类库</span></span><br><span class="line">        <span class="attr">commons</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="literal">Infinity</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-start-config-js与build-config-js差异"><a href="#6-6-start-config-js与build-config-js差异" class="headerlink" title="6.6 start.config.js与build.config.js差异"></a>6.6 start.config.js与build.config.js差异</h2><h3 id="6-6-1-start-config-js"><a href="#6-6-1-start-config-js" class="headerlink" title="6.6.1. start.config.js"></a>6.6.1. start.config.js</h3><ul>
<li>使用HotModuleReplacementPlugin热更新模块</li>
<li>使用open-browser-plugin本地起服务时自动打开指定页面</li>
</ul>
<h3 id="6-6-2-build-cofig-js"><a href="#6-6-2-build-cofig-js" class="headerlink" title="6.6.2. build.cofig.js"></a>6.6.2. build.cofig.js</h3><ul>
<li>使用CleanWebpackPlugin在每一次构建前清除指定目录文件 </li>
<li>使用OptimizeCSSAssetsPlugin压缩CSS代码 </li>
<li>使用TerserWebpackPlugin压缩JS代码</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>01｜Chrome架构：仅仅打开了1个页面，为什么有4个进程</title>
    <url>/2022/03/22/01%EF%BD%9CChrome%E6%9E%B6%E6%9E%84%EF%BC%9A%E4%BB%85%E4%BB%85%E6%89%93%E5%BC%80%E4%BA%861%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%894%E4%B8%AA%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>这是阅读李兵 ——《浏览器工作原理与实践》并作出总结的第一天，整个专题共有46讲，规划是一天做一讲的总结并回顾之前的文章。</p>
</blockquote>
<h1 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h1><h2 id="1-1-什么是并行处理"><a href="#1-1-什么是并行处理" class="headerlink" title="1.1 什么是并行处理"></a>1.1 什么是并行处理</h2><span id="more"></span>
<ol>
<li>并行处理就是同一时刻可以执行多个任务</li>
</ol>
<h2 id="1-2-线程VS进程"><a href="#1-2-线程VS进程" class="headerlink" title="1.2 线程VS进程"></a>1.2 线程VS进程</h2><ol>
<li>线程是不能单独存在的，由进程来启用和管理</li>
<li>一个进程就是一个程序的运行实例</li>
<li>进程与线程之间的4个特点<ol>
<li>进程中的任一线程崩溃都会导致进程的崩溃</li>
<li>线程之间可以共享进程的数据</li>
<li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li>
<li>进程之间的内容相互隔离</li>
</ol>
</li>
</ol>
<h1 id="2-单进程浏览器时代"><a href="#2-单进程浏览器时代" class="headerlink" title="2. 单进程浏览器时代"></a>2. 单进程浏览器时代</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1647908726062-796e9ddb-e2be-4e58-9c8f-c3bfe2b495c3.png" alt="image.png"><br>单进程浏览器时代，浏览器的所有功能模块（如网络、插件、JavaScript运行环境、渲染引擎和页面等）都运行在同一个进程里。<br>单进程浏览器存在不稳定、不流畅、不安全的问题。</p>
<h2 id="2-1-不稳定"><a href="#2-1-不稳定" class="headerlink" title="2.1 不稳定"></a>2.1 不稳定</h2><blockquote>
<p>插件</p>
</blockquote>
<p>单进程浏览器时代，需要借助<code>插件</code>来实现诸如Web视频、Web游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。</p>
<blockquote>
<p>渲染引擎</p>
</blockquote>
<p>渲染引擎模块，通常一些复杂的JS代码都有可能引起渲染引擎模块的崩溃</p>
<h2 id="2-2-不流畅"><a href="#2-2-不流畅" class="headerlink" title="2.2  不流畅"></a>2.2  不流畅</h2><p>所有页面的渲染线程、JavaScript执行环境以及插件都运行在一个页面线程里，意味着同一时刻只能有一个模块可以被执行。</p>
<blockquote>
<p>脚本或插件使单进程浏览器变卡顿</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">freeze</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;freeze&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">freeze();</span><br></pre></td></tr></table></figure>

<ul>
<li>执行上述代码，会出现什么问题</li>
</ul>
<p>JavaScript执行会独占整个线程，导致该线程其他模块无法被执行，即页面没有机会去执行任务，导致整个浏览器失去响应。</p>
<blockquote>
<p>页面内存泄漏使单进程变慢</p>
</blockquote>
<p>浏览器的内核是十分复杂的，运行一个复杂的页面再关闭页面，会存在内存不能完全回收的情况，导致使用时间越长，内存占用越高，浏览器就会变得越慢</p>
<h2 id="2-3-不安全"><a href="#2-3-不安全" class="headerlink" title="2.3 不安全"></a>2.3 不安全</h2><blockquote>
<p>插件</p>
</blockquote>
<p>插件可以获取到操作系统的任意资源，当你在页面运行一个插件时就意味着这个插件能完全操作你的电脑。如果是个恶意插件，就有可能释放病毒， 窃取账号密码，引发安全问题</p>
<blockquote>
<p>页面脚本</p>
</blockquote>
<p>可以通过浏览器的漏洞来获取系统权限，这些脚本获取系统权限之后也可以对电脑做一些恶意的事情，引发安全问题。</p>
<h1 id="3-多进程浏览器时代"><a href="#3-多进程浏览器时代" class="headerlink" title="3. 多进程浏览器时代"></a>3. 多进程浏览器时代</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1647925378646-b0effeba-5b28-492c-91c6-60781c2d9ef3.png" alt="image.png"></p>
<h2 id="3-1-解决不稳定问题"><a href="#3-1-解决不稳定问题" class="headerlink" title="3.1 解决不稳定问题"></a>3.1 解决不稳定问题</h2><p>进程之间是相互隔离的，当一个页面或者插件崩溃，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面。这就解决了单进程浏览器时代页面或者插件的崩溃导致浏览器崩溃的不稳定问题</p>
<h2 id="3-2-解决不流畅问题"><a href="#3-2-解决不流畅问题" class="headerlink" title="3.2 解决不流畅问题"></a>3.2 解决不流畅问题</h2><p>JavaScript只会运行在渲染进程中，即使JS阻塞了渲染进程，影响到的也只是当前的渲染页面，并不会影响到浏览器和其他页面，因为其他页面的脚本是运行在自己的渲染进程中的。</p>
<blockquote>
<p>页面内存泄漏</p>
</blockquote>
<p>在关闭页面后，整个渲染进程也会被关闭，那么这个进程占用的内存就会被操作系统回收，就轻松解决了内存泄漏问题</p>
<h2 id="3-2-解决不安全问题"><a href="#3-2-解决不安全问题" class="headerlink" title="3.2 解决不安全问题"></a>3.2 解决不安全问题</h2><p>使用安全沙箱。将渲染进程和部分插件进程锁在沙箱里面，即使在渲染进程和插件进程里面执行恶意程序，也无法突破沙箱去获取系统权限。</p>
<h1 id="4-未来面向服务的架构"><a href="#4-未来面向服务的架构" class="headerlink" title="4. 未来面向服务的架构"></a>4. 未来面向服务的架构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1647925693055-784e0ac7-7ba9-479a-8b05-5b74948ec367.png#clientId=ue7ed3d14-4548-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=291&id=ud2b2b057&margin=%5Bobject%20Object%5D&name=image.png&originHeight=582&originWidth=1142&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136514&status=done&style=none&taskId=u168ad080-1f5f-4d37-8201-16d7de4638b&title=&width=571" alt="image.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>这时候我们就可以解答题目（题目：仅仅打开了1个页面，为什么有4个进程）为什么有4个进程了。<ol>
<li>四个进程分别是浏览器进程、渲染进程、GPU进程、网络进程。</li>
<li>因为浏览器是多进程浏览器，所以打开一个页面，就会有4个进程，如果有使用插件的话，就会再多一个插件进程。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>《浏览器工作原理与实践》</tag>
      </tags>
  </entry>
  <entry>
    <title>02 | TCP协议：如何保证页面文件能被完整送达浏览器？</title>
    <url>/2022/03/24/02%EF%BD%9CTCP%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%A1%B5%E9%9D%A2%E6%96%87%E4%BB%B6%E8%83%BD%E8%A2%AB%E5%AE%8C%E6%95%B4%E9%80%81%E8%BE%BE%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="1-IP：把数据包送达目的主机"><a href="#1-IP：把数据包送达目的主机" class="headerlink" title="1. IP：把数据包送达目的主机"></a>1. IP：把数据包送达目的主机</h1><p><strong>计算机的地址称为IP地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1647998216854-c2a1b421-59d6-4550-ade3-10ad68e511f8.png" alt="image.png"></p>
<span id="more"></span>
<blockquote>
<p>数据包从主机A到主机B的旅程</p>
</blockquote>
<ul>
<li>上层将“极客时间”的数据包交给数据层</li>
<li>网络层再将IP头附加到数据包上，组成新的IP数据包，并交给底层</li>
<li>底层通过物理网络将数据包传输给主机B</li>
<li>数据包被传输到主机B的网络层，主机B拆分数据包的IP头信息，并将拆开的数据部分交给上层</li>
<li>最后，含有“极客时间”信息的数据包就到达了主机B的上层</li>
</ul>
<h1 id="2-UDP：把数据包送达应用程序"><a href="#2-UDP：把数据包送达应用程序" class="headerlink" title="2. UDP：把数据包送达应用程序"></a>2. UDP：把数据包送达应用程序</h1><p><code>IP</code>是非常底层的协议，只负责把数据包传送到对方电脑，但是对方并不知道要把数据包传输给哪个程序，是交给浏览器还是交给王者荣耀？因此，基于<code>IP</code>之上开发能和应用打交道的协议。最常见的就是“用户数据包协议(User Datagram Protocol)，简称<code>UDP</code>”</p>
<p><code>UDP</code>中一个最重要的信息就是端口号，通过端口号<code>UDP</code>就能把指定的数据包发送给指定的程序。</p>
<p><strong>IP通过IP地址信息把数据包发送给指定的电脑，UDP通过端口号把数据分发给正确的程序。</strong></p>
<p>UDP头中除了目的端口，还有源端口信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1647998778293-f1d5e758-241e-453c-abe6-83988c21f833.png" alt="image.png"></p>
<blockquote>
<p>数据包从主机A到主机B的过程</p>
</blockquote>
<ul>
<li>上层将含有“极客时间”的数据包交给传输层</li>
<li>传输层在数据包前面加上UDP头，组成新的UDP数据包，再将新的UDP数据包交给网络层</li>
<li>网络层再将IP头附加到数据包上，组成新的IP数据包，并交给底层</li>
<li>数据包被传输给主机B的网络层，在这里主机B拆分IP头信息，并将拆开来的数据交给传输层</li>
<li>在传输层中，数据包的UDP头会把拆开，并根据UDP中提供的端口号，找到对应的程序，将数据交给上层的应用程序。</li>
<li>最终，含有“极客时间”信息的数据就到了主机B的上层应用程序这里。</li>
</ul>
<blockquote>
<p>UDP存在的问题</p>
</blockquote>
<ul>
<li>UDP可以校验数据是否正确，但发送后无法确认数据是否到达目标程序</li>
<li>数据有可能在传输过程中丢失，但是UDP不提供重传机制，丢失的数据无法再重发到目标程序</li>
</ul>
<h1 id="3-TCP：把数据完整地送达应用程序"><a href="#3-TCP：把数据完整地送达应用程序" class="headerlink" title="3. TCP：把数据完整地送达应用程序"></a>3. TCP：把数据完整地送达应用程序</h1><blockquote>
<p>UDP存在的问题</p>
</blockquote>
<ol>
<li>不提供重传的机制，丢失的数据包无法被再次传输，导致数据容易丢失。</li>
<li>数据包在传输的过程中会被分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端。但是UDP协议并不知道该如何组装这些数据包，从而把这些数据包还原成完整的文件。</li>
</ol>
<blockquote>
<p>引入TCP</p>
</blockquote>
<p><strong>TCP是一种面向连接，可靠的，基于字节流的传输层通信协议。相对于UDP，TCP有以下两个特点：</strong></p>
<ol>
<li>对于数据包丢失，提供重传机制</li>
<li>引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</li>
</ol>
<p>和UDP头一样，TCP头除了包含了目标端口和本机端口号外，还提供了用于排序的序列号，以便接收端通过序号来重排数据包。</p>
<p>下图是TCP下单个数据包的传输过程：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1648079519137-b9af7ef9-2d2c-49c1-a87d-e18180a295c8.png" alt="image.png"><br>再来继续看<strong>完整的TCP连接过程，</strong>通过这个过程我们就能明白TCP是如何保证重传机制和数据包的排序功能的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/323971/1648079594794-7d30c679-805b-4563-88c3-f4aaea740de0.png" alt="image.png"><br>一个完整的TCP连接的生命周期包括了“**建立连接” “传输数据 ” “断开连接” **这三个阶段。</p>
<ul>
<li><strong>建立连接阶段。</strong>这个阶段通过三次握手来建立服务器端和客户端之间的连接。三次握手，就是指在建立一个TCP连接时，客户端和服务器端总共要发生三个数据包来确定连接的建立</li>
<li><strong>传输数据阶段。</strong>在该阶段，接收端需要对每个数据包进行确认操作，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重传机制。同样，一个大的文件在传输过程中会被拆分成很多小的数据包来进行传输，这些数据包到达接收端后，接收端会按照TCP头中的序号为其排序，从而保证组成完整的数据。</li>
<li><strong>最后，断开连接阶段。</strong>数据传输完毕之后，就要终止连接了，涉及到最后一个阶段“四次挥手”来保证双方都能断开连接。</li>
</ul>
<p>TCP为了保证数据传输的可靠性，牺牲了数据包的传输速度，因此“三次握手”和“数据包校验机制”等把传输过程中的数据包的数量提高了一倍。</p>
<h1 id="思考：如何理解HTTP和TCP的关系？"><a href="#思考：如何理解HTTP和TCP的关系？" class="headerlink" title="思考：如何理解HTTP和TCP的关系？"></a>思考：如何理解HTTP和TCP的关系？</h1><ol>
<li>HTTP和TCP都是TCP/IP协议簇的子集。</li>
<li>HTTP属于应用层，TCP属于传输层，HTTP协议位于TCP协议的上层。</li>
<li>请求方要发送的数据，在应用层加上HTTP头以后会交给传输层的TCP协议处理，应答方接收到的数据包，在传输层拆掉TCP头以后交给应用层HTTP协议处理。</li>
<li>建立TCP连接后会顺序收发数据，请求方和应答方都必须依据HTTP规范构建和解析HTTP报文。</li>
</ol>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>《浏览器工作原理与实践》</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise实现</title>
    <url>/2022/03/15/Promise%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-初始结构"><a href="#1-初始结构" class="headerlink" title="1. 初始结构"></a>1. 初始结构</h1><h2 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>传入func，func的参数分别是resolve, reject<span id="more"></span>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">    func(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">resolve</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">reject</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-状态"><a href="#2-状态" class="headerlink" title="2. 状态"></a>2. 状态</h1><ol>
<li>共有三种状态，分别是<ul>
<li>Pending</li>
<li>Fulfilled</li>
<li>Rejected</li>
</ul>
</li>
</ol>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = MyPromise.PENDING;</span><br><span class="line">        func(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">resolve</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = MyPromise.FULFILLED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">reject</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = MyPromise.REJECTED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>static关键字</p>
</blockquote>
<ol>
<li><p>static定义静态方法/静态属性</p>
</li>
<li><p>类相当于实例的原型，实例能够继承原型上的方法和属性；</p>
</li>
<li><p>加上static关键字，方法或者属性就不会被实例继承，需要通过类来调用。</p>
</li>
</ol>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt="1.png"></p>
<p>现象：报错Cannot read property ‘status’ of undefined</p>
<p>原因: </p>
<ol>
<li><p>首先，我们在创建新实例的时候确实绑定了this指向</p>
</li>
<li><p>但是，我们是在新实例被创建后再在外部环境下执行resolve方法的，我们可以在resolve打印一下this指向</p>
</li>
</ol>
<p><img src="2.png" alt="2.png"></p>
<p>可以看到，此时this指向undefined</p>
<p>解决办法：绑定this值，可以通过bind, 箭头函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">				....</span><br><span class="line">        func(<span class="built_in">this</span>.resolve.bind(<span class="built_in">this</span>), <span class="built_in">this</span>.reject.bind(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很好，此时this指向对了。</p>
<h1 id="3-传参数"><a href="#3-传参数" class="headerlink" title="3. 传参数"></a>3. 传参数</h1><h2 id="原生-1"><a href="#原生-1" class="headerlink" title="原生"></a>原生</h2><ol>
<li>原生的promise可以给resolve/reject回调传入参数，并且在then中可以接收到。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;42&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><ol>
<li>在constructor构造函数中定义变量result，用来存储传进来的参数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">        <span class="built_in">this</span>.result = <span class="literal">null</span>;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">resolve</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">						...</span><br><span class="line">            <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">reject</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">						...</span><br><span class="line">            <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-then"><a href="#4-then" class="headerlink" title="4. then"></a>4. then</h1><h2 id="原生-2"><a href="#原生-2" class="headerlink" title="原生"></a>原生</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;42&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result) &#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>原生的then支持传入两个回调函数</li>
<li>但是只能执行其中一个回调函数，如果状态是fulfilled，执行第一个回调函数；否则，执行第二个回调函数</li>
</ol>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><ol>
<li>定义then函数，传入两个回调函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">		....</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulFILLED, onREJECTED</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.FULFILLED) &#123;</span><br><span class="line">            onFulFILLED(<span class="built_in">this</span>.result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.REJECTED) &#123;</span><br><span class="line">            onREJECTED(<span class="built_in">this</span>.result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-执行异常"><a href="#5-执行异常" class="headerlink" title="5. 执行异常"></a>5. 执行异常</h1><h2 id="异常一"><a href="#异常一" class="headerlink" title="异常一"></a>异常一</h2><h3 id="原生-3"><a href="#原生-3" class="headerlink" title="原生"></a>原生</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;执行异常&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result) &#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result.message)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行异常</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在new Promise时抛出错误，throw new Error(‘…’)；在then中的第二个回调函数中可以catch到这个错误</li>
</ol>
<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><h4 id="目前效果"><a href="#目前效果" class="headerlink" title="目前效果"></a>目前效果</h4><p>同样的，我们可以在我们现有的实现代码中抛出相同异常，看看会发生什么？</p>
<p><img src="3.png" alt="3.png"></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h4><p>在构造函数中添加try…catch，如果没有错误就走正常的func，如果有错误就直接走reject方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = MyPromise.PENDING;</span><br><span class="line">        <span class="built_in">this</span>.result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            func(<span class="built_in">this</span>.resolve.bind(<span class="built_in">this</span>), <span class="built_in">this</span>.reject.bind(<span class="built_in">this</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="built_in">this</span>.reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行</strong></p>
<p><img src="4.png" alt="4.png"></p>
<h2 id="异常二"><a href="#异常二" class="headerlink" title="异常二"></a>异常二</h2><h3 id="原生-4"><a href="#原生-4" class="headerlink" title="原生"></a>原生</h3><ol>
<li>原生Promise规定then里面的两个参数如果不是函数的话就要被忽略</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;42&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result.message)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>由于第一个参数传入的undefined,根据规定，这个参数被忽略。所以控制台没有任何输出</p>
<h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><h4 id="目前效果-1"><a href="#目前效果-1" class="headerlink" title="目前效果"></a>目前效果</h4><p>尝试在我们目前的实现代码中传入undefeind，是会报错的，如下图所示</p>
<p><img src="5.png" alt="5.png"></p>
<h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h4><p>默认将onFulFILLED和onREJECTED处理成一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulFILLED, onREJECTED</span>)</span> &#123;</span><br><span class="line">        onFulFILLED = <span class="keyword">typeof</span> onFulFILLED === <span class="string">&#x27;function&#x27;</span> ? onFulFILLED : <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">        onREJECTED = <span class="keyword">typeof</span> onREJECTED === <span class="string">&#x27;function&#x27;</span> ? onREJECTED : <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，就能和原生一样了，如果传入的参数不是函数的话，就忽略。</p>
<h1 id="6-异步"><a href="#6-异步" class="headerlink" title="6. 异步"></a>6. 异步</h1><h2 id="关注点一"><a href="#关注点一" class="headerlink" title="关注点一"></a>关注点一</h2><h3 id="原生-5"><a href="#原生-5" class="headerlink" title="原生"></a>原生</h3><p>首先，我们先来了解一下原生Promise的执行机制。先来看一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result) &#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result.message)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 这里关系到事件执行机制，不懂的可以去了解一下这方面的知识。</p>
</blockquote>
<p>执行顺序如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">哈哈</span><br></pre></td></tr></table></figure>

<p>可以看到，我们先执行同步任务，所以输出1，2，3；然后执行异步任务，输出哈哈；</p>
<h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><h4 id="目前效果-2"><a href="#目前效果-2" class="headerlink" title="目前效果"></a>目前效果</h4><p>让我们在目前的实现代码中执行该段代码，</p>
<p><img src="6.png" alt="6.png"></p>
<p>和原生不一样呢，它并没有异步的feel～</p>
<h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h4><ol>
<li>引入setTimeout让我们的Promise.then变成异步来模仿原生Promise的执行效果把～</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulFILLED, onREJECTED</span>)</span> &#123;</span><br><span class="line">				...</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.FULFILLED) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                onFulFILLED(<span class="built_in">this</span>.result)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.REJECTED) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                onREJECTED(<span class="built_in">this</span>.result)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>还是执行上面的代码</li>
</ol>
<p><img src="7.png" alt="7.png"></p>
<p>哇唔～现在我们可以异步输出哈哈啦～</p>
<h2 id="关注点二"><a href="#关注点二" class="headerlink" title="关注点二"></a>关注点二</h2><h3 id="原生-6"><a href="#原生-6" class="headerlink" title="原生"></a>原生</h3><p>如果我们在new Promise中的resolve回调外面加入一个setTimeout呢？此时原生Promise的执行效果会是什么样的？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result) &#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result.message)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">哈哈</span><br></pre></td></tr></table></figure>

<h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><h4 id="目前效果-3"><a href="#目前效果-3" class="headerlink" title="目前效果"></a>目前效果</h4><p>让我们继续在实现代码中执行以上的代码看看输出顺序吧～</p>
<p><img src="8.png" alt="8.png"></p>
<p>咦～哈哈哪里去了？？</p>
<h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a><strong>分析原因</strong></h4><p>“哈哈”没有被输出原因 -&gt; then方法可能没有被执行 -&gt; then方法中的状态可能没有被改变 -&gt; 因此，让我们输出一下状态看看吧</p>
<p><img src="9.png" alt="9.png"></p>
<ol>
<li><p>在构造函数中，status有发生了变化，并且从pending -&gt; fulfilled；</p>
</li>
<li><p>在then函数中，没有调用status === ‘fulfilled’的回调函数</p>
<ol>
<li>在事件循环机制中，如果我们不考虑现有的微任务的执行机制，单纯从代码来看，promise1.then方法的执行会早于setTimeout；也就是在resolve执行之前即status还没有发生变化的时候，就执行的then方法。</li>
<li>我们可以通过在实现代码的then方法中输出一下，就可以看到执行顺序</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">执行了then方法,此时的status状态为 pending</span><br><span class="line"><span class="number">3</span></span><br><span class="line">pending</span><br><span class="line"><span class="number">4</span></span><br><span class="line">fulfilled</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>所以尽管setTimeout中状态发生了变化到fulfilled，但是then方法已经先一步执行了，所以无法输出“哈哈”</li>
</ol>
</li>
</ol>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li>我们需要在status === ‘PENDING’时，做一些判断<ol>
<li>此时，我们执行then方法的时候，status为PENDING状态，所以我们可以将回调函数通过数组存储起来</li>
<li>当我们在setTimeout中调用resolve时，可以遍历数组，如果数组中有值，我们遍历调用数组中存储的回调函数callback</li>
</ol>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  	...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">				...</span><br><span class="line">        <span class="built_in">this</span>.resolveCallBack = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectCallBack = [];</span><br><span class="line">				...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">resolve</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = MyPromise.FULFILLED;</span><br><span class="line">            <span class="built_in">this</span>.result = result;</span><br><span class="line">            <span class="built_in">this</span>.resolveCallBack.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">                callback(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">reject</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = MyPromise.REJECTED;</span><br><span class="line">            <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.rejectCallBack.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">            callback(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，我们查看一下输出</p>
<p><img src="10.png" alt="10.png"></p>
<p>现在，我们可以正常输出“哈哈”了。但是，我们的“哈哈”位置显然是不对的，正常情况下，他应该在5后面才输出的。</p>
<p>回顾实现代码，我们可以在resove和reject方法中使用setTimeout来保证输出机制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  	...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">				...</span><br><span class="line">        <span class="built_in">this</span>.resolveCallBack = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectCallBack = [];</span><br><span class="line">				...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">resolve</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = MyPromise.FULFILLED;</span><br><span class="line">                <span class="built_in">this</span>.result = result;</span><br><span class="line">                <span class="built_in">this</span>.resolveCallBack.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">                    callback(result);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">reject</span>(<span class="params">result</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === MyPromise.PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = MyPromise.REJECTED;</span><br><span class="line">                <span class="built_in">this</span>.result = result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.rejectCallBack.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">                callback(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，输出顺序如下</p>
<p><img src="11.png" alt="11.png"></p>
<h1 id="7-链式"><a href="#7-链式" class="headerlink" title="7. 链式"></a>7. 链式</h1><h2 id="原生-7"><a href="#原生-7" class="headerlink" title="原生"></a>原生</h2><p>我们知道， 在原生Promise中，Promise.then方法会返回一个then，可以进行链式调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise1.then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result)&#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(result.message)&#125;</span><br><span class="line">).then(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;链式调用&#x27;</span>);&#125;,</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result.message) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">哈哈</span><br><span class="line">链式调用</span><br></pre></td></tr></table></figure>

<h2 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h2><h3 id="目前效果-4"><a href="#目前效果-4" class="headerlink" title="目前效果"></a>目前效果</h3><p><img src="12.png" alt="12.png"></p>
<p>报错了，是因为我们的then方法并没有返回then方法，因此我们可以在then方法中return一个MyPromise，MyPromise有then方法，就可以实现链式调用了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  ....</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulFILLED, onREJECTED</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            onFulFILLED = <span class="keyword">typeof</span> onFulFILLED === <span class="string">&#x27;function&#x27;</span> ? onFulFILLED : <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">            onREJECTED = <span class="keyword">typeof</span> onREJECTED === <span class="string">&#x27;function&#x27;</span> ? onREJECTED : <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">					...</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以进行链式调用了，但是链式调用中的then并不能正常输出，还有很多细节～ 慢慢实现</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这里，我从初始结构 -&gt; 状态 -&gt; 传参 -&gt; then函数 -&gt; Promise中异常处理 -&gt; 异步 -&gt; 链接来实现了简单版的Promise，虽然还有很多细节没有实现，但是收获很大。</p>
]]></content>
  </entry>
  <entry>
    <title>axios中的utils工具文件.md</title>
    <url>/2022/03/09/axios%E4%B8%AD%E7%9A%84utils%E5%B7%A5%E5%85%B7%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Axios-utils-js"><a href="#Axios-utils-js" class="headerlink" title="Axios/utils.js"></a>Axios/utils.js</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol>
<li>这是跟随<a href="https://juejin.cn/user/1415826704971918">@若川</a> 打卡源码活动的第一个打卡。</li>
<li>参考<a href="https://juejin.cn/post/7042610679815241758">阅读axios源码，发现了这些实用的基础工具函数</a> ，不得不说，环境准备写得很细致，所以这边留个记录。</li>
<li>本次源码阅读的主要内容是<a href="https://github.com/axios/axios/blob/master/lib/utils.js">utils.js</a>.</li>
</ol>
<span id="more"></span>
<h1 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h1><blockquote>
<p>本节内容将遍历utils.js中所有的工具函数</p>
</blockquote>
<h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is an Array</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is an Array, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isUndefined"><a href="#isUndefined" class="headerlink" title="isUndefined"></a>isUndefined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is undefined 判断值是否是undefined</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if the value is undefined, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUndefined</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isBuffer"><a href="#isBuffer" class="headerlink" title="isBuffer"></a>isBuffer</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a Buffer 判断一个值是否是Buffer类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a Buffer, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBuffer</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    		 !isUndefined(val) &amp;&amp;</span><br><span class="line">    		 val.constructor !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    		 !isUndefined(val.constructor) &amp;&amp;</span><br><span class="line">    		 <span class="keyword">typeof</span> val.constructor.isBuffer === <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">    		 val.constructor.isBuffer(val); <span class="comment">// 通过构造函数的isBuffer方法来判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>什么是Buffer</p>
</blockquote>
<p><a href="https://www.runoob.com/nodejs/nodejs-buffer.html">参考</a></p>
<p>Buffer 缓冲区</p>
<p>存在原因：</p>
<ol>
<li>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</li>
<li>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</li>
</ol>
<h2 id="isArrayBuffer"><a href="#isArrayBuffer" class="headerlink" title="isArrayBuffer"></a>isArrayBuffer</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayBuffer</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object ArrayBuffer]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>什么是ArrayBuffer</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">参考</a></p>
<p>ArrayBuffer 通用的、固定长度的原始二进制数据缓冲区</p>
<h2 id="isFormData"><a href="#isFormData" class="headerlink" title="isFormData"></a>isFormData</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a FormData</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is an FormData, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFormData</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object FormData]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isArrayBufferView"><a href="#isArrayBufferView" class="headerlink" title="isArrayBufferView"></a>isArrayBufferView</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a view on an ArrayBuffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a view on an ArrayBuffer, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayBufferView</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="built_in">ArrayBuffer</span> !== <span class="string">&#x27;undefined&#x27;</span>) &amp;&amp; (<span class="built_in">ArrayBuffer</span>.isView)) &#123;</span><br><span class="line">    result = <span class="built_in">ArrayBuffer</span>.isView(val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = (val) &amp;&amp; (val.buffer) &amp;&amp; (isArrayBuffer(val.buffer));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>正常情况下, typeof ArrayBuffer === ‘function’</li>
<li>Array.isView  如果参数是ArrayBuffer的视图实例则返回true</li>
</ol>
<h2 id="isString"><a href="#isString" class="headerlink" title="isString"></a>isString</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a String</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a String, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isNumber"><a href="#isNumber" class="headerlink" title="isNumber"></a>isNumber</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a Number</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a Number, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isObject"><a href="#isObject" class="headerlink" title="isObject"></a>isObject</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>typeof null === ‘object’;</li>
</ol>
<h2 id="isPlainObject"><a href="#isPlainObject" class="headerlink" title="isPlainObject"></a>isPlainObject</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a plain Object 判断是否是一个纯对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>True if value is a plain Object, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (toString.call(val) !== <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(val);</span><br><span class="line">  <span class="keyword">return</span> prototype === <span class="literal">null</span> || prototype === <span class="built_in">Object</span>.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Plain Object</p>
</blockquote>
<ol>
<li><p>概念： 纯粹的对象</p>
</li>
<li><p>怎么创建plain object，通过’{}’或’new Object’。即：</p>
<ul>
<li><p>let obj = {}</p>
</li>
<li><p>let obj = new Object()</p>
</li>
</ul>
</li>
<li><p>对isPlainObject方法的理解</p>
<ul>
<li>Object.getPrototypeOf(val) 获取val的原型链对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1Pro = <span class="built_in">Object</span>.getPrototypeOf(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj1Pro&quot;</span>, obj1Pro === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj1&quot;</span>, isPlainObject(obj1)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">const</span> obj2Pro = <span class="built_in">Object</span>.getPrototypeOf(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj2Pro&quot;</span>, obj2Pro === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj2&quot;</span>, isPlainObject(obj2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="keyword">const</span> obj3Pro = <span class="built_in">Object</span>.getPrototypeOf(obj3);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj3Pro&quot;</span>, obj3Pro === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj3&quot;</span>, isPlainObject(obj3)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">const</span> obj4Pro = <span class="built_in">Object</span>.getPrototypeOf(obj4);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj4Pro&quot;</span>, obj4Pro === <span class="built_in">Object</span>.prototype); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj4&quot;</span>, isPlainObject(obj4)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="isDate"><a href="#isDate" class="headerlink" title="isDate"></a>isDate</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a Date</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a Date, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object Date]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a File</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a File, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFile</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object File]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isBlob"><a href="#isBlob" class="headerlink" title="isBlob"></a>isBlob</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a Blob</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a Blob, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBlob</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object Blob]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction"></a>isFunction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object Function]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isStream"><a href="#isStream" class="headerlink" title="isStream"></a>isStream</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a Stream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a Stream, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStream</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isObject(val) &amp;&amp; isFunction(val.pipe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isURLSearchParams"><a href="#isURLSearchParams" class="headerlink" title="isURLSearchParams"></a>isURLSearchParams</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if a value is a URLSearchParams object</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>val The value to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>True if value is a URLSearchParams object, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isURLSearchParams</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">&#x27;[object URLSearchParams]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><blockquote>
<p>去除首尾空格</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trim excess whitespace off the beginning and end of a string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str The String to trim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;String&#125;</span> </span>The String freed of excess whitespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.trim ? str.trim() : str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="isStandardBrowserEnv"><a href="#isStandardBrowserEnv" class="headerlink" title="isStandardBrowserEnv"></a>isStandardBrowserEnv</h2><blockquote>
<p>判断是否是标准浏览器环境</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if we&#x27;re running in a standard browser environment 是否运行在标准浏览器环境</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This allows axios to run in a web worker, and react-native.</span></span><br><span class="line"><span class="comment"> * Both environments support XMLHttpRequest, but not fully standard globals.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * web workers:</span></span><br><span class="line"><span class="comment"> *  typeof window -&gt; undefined</span></span><br><span class="line"><span class="comment"> *  typeof document -&gt; undefined</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * react-native:</span></span><br><span class="line"><span class="comment"> *  navigator.product -&gt; &#x27;ReactNative&#x27;</span></span><br><span class="line"><span class="comment"> * nativescript</span></span><br><span class="line"><span class="comment"> *  navigator.product -&gt; &#x27;NativeScript&#x27; or &#x27;NS&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStandardBrowserEnv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; </span><br><span class="line">       (navigator.product === <span class="string">&#x27;ReactNative&#x27;</span> ||                           </span><br><span class="line">        navigator.product === <span class="string">&#x27;NativeScript&#x27;</span> ||</span><br><span class="line">        navigator.product === <span class="string">&#x27;NS&#x27;</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">document</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Iterate over an Array or an Object invoking a function for each item.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // fn.call(null, obj[i], i, obj);</span></span><br><span class="line"><span class="comment"> * If `obj` is an Array callback will be called passing</span></span><br><span class="line"><span class="comment"> * the value, index, and complete array for each item.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // fn.call(null, obj[key], key, obj);</span></span><br><span class="line"><span class="comment"> * If &#x27;obj&#x27; is an Object callback will be called passing</span></span><br><span class="line"><span class="comment"> * the value, key, and complete object for each property.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object|Array&#125;</span> </span>obj The object to iterate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>fn The callback to invoke for each item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">obj, fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Don&#x27;t bother if no value provided</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Force an array if not already something iterable</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 强制转换为可遍历类型</span></span><br><span class="line">    <span class="comment">/*eslint no-param-reassign:0*/</span></span><br><span class="line">    obj = [obj];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isArray(obj)) &#123;</span><br><span class="line">    <span class="comment">// Iterate over array values</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = obj.length; i &lt; l; i++) &#123;</span><br><span class="line">      fn.call(<span class="literal">null</span>, obj[i], i, obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Iterate over object keys</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)) &#123;</span><br><span class="line">        fn.call(<span class="literal">null</span>, obj[key], key, obj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Object.prototype.hasOwnProperty.call(obj, key) 判断obj本身是否有key这个属性</li>
<li>for…in 以任意顺序遍历一个对象的除<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性，包括继承的可枚举属性。</li>
</ol>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Accepts varargs expecting each argument to be an object, then</span></span><br><span class="line"><span class="comment"> * immutably merges the properties of each object and returns result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When multiple objects contain the same key the later object in</span></span><br><span class="line"><span class="comment"> * the arguments list will take precedence.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ```js</span></span><br><span class="line"><span class="comment"> * var result = merge(&#123;foo: 123&#125;, &#123;foo: 456&#125;);</span></span><br><span class="line"><span class="comment"> * console.log(result.foo); // outputs 456</span></span><br><span class="line"><span class="comment"> * ```</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>obj1 Object to merge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>Result of all merge properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"><span class="comment">/* obj1, obj2, obj3, ... */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(result[key]) &amp;&amp; isPlainObject(val)) &#123;</span><br><span class="line">      result[key] = merge(result[key], val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(val)) &#123;</span><br><span class="line">      result[key] = merge(&#123;&#125;, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isArray(val)) &#123;</span><br><span class="line">      result[key] = val.slice();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[key] = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    forEach(<span class="built_in">arguments</span>[i], assignValue);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> merge</p>
</blockquote>
<ol>
<li>是一个不定长参数函数，所以使用arguments类数组去获取传入的参数</li>
<li>作用：合并对象，后面的对象如果key和前面的key是一样的，会进行覆盖。</li>
</ol>
<p>（蛮好玩的，可以自己写一下）</p>
<h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bind实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, thisArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            args[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(thisArg, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extends object a by mutably adding to it the properties of object b.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>a The object to be extended</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>b The object to copy properties from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg The object to bind function to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span> </span>The resulting value of object a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">a, b, thisArg</span>) </span>&#123;</span><br><span class="line">  forEach(b, <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thisArg &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      a[key] = bind(val, thisArg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[key] = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>entend</p>
</blockquote>
<ol>
<li><p>传入三个参数a, b, thisArg; a是结果对象，b是被复制的对象，thisArg是this指向</p>
</li>
<li><p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">456</span>,</span><br><span class="line">    <span class="attr">log</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this指向&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">foo</span>: <span class="number">789</span>&#125;</span><br><span class="line"><span class="keyword">var</span> result = extend(a, b, c);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123; foo: 456, log: [Function: wrap] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; foo: 456, log: [Function: wrap] &#125;</span></span><br><span class="line">result.log(); <span class="comment">// this指向 &#123; foo: 789 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="stripBom"><a href="#stripBom" class="headerlink" title="stripBom"></a>stripBom</h2><blockquote>
<p>删除UTF-8中的Bom</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>content with BOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>content value without BOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripBOM</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (content.charCodeAt(<span class="number">0</span>) === <span class="number">0xFEFF</span>) &#123;</span><br><span class="line">    content = content.slice(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bom ——  Byte Order Mark</p>
</blockquote>
<ol>
<li><p>它是一个Unicode字符，通常出现在文本的开头，用来标识字节序。</p>
</li>
<li><p>UTF-8主要的优点是可以兼容ASCII，但如果使用BOM的话，这个好处就荡然无存了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>源码阅读</category>
      </categories>
  </entry>
  <entry>
    <title>git规范</title>
    <url>/2022/04/22/git%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="一、提交的代码规范"><a href="#一、提交的代码规范" class="headerlink" title="一、提交的代码规范"></a>一、提交的代码规范</h1><p><code>husky</code> + <code>lint-staged</code> + <code>pre-commit</code></p>
<p><strong>husky:</strong> 操作git钩子的工具</p>
<p><strong>lint-staged:</strong> 本地暂存代码检查工具</p>
<p><strong>pre-commit:</strong> 通过钩子函数，判断提交的代码是否符合规范</p>
<span id="more"></span>


<ol>
<li>安装代码校验依赖</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i lint-staged husky -D</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在package.json中添加脚本</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;prepare&quot;</span>: <span class="string">&quot;husky install&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>执行 <code>npm run prepare</code> , 在根目录创建一个<code>husky</code> 文件夹</p>
<ol>
<li><img src="image-20220421194607581.png" alt="image-20220421194607581"></li>
</ol>
</li>
<li><p>执行 <code>npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</code> ，在.husky文件夹下创建pre-commit shell文件 执行 npx lint-staged</p>
<ol>
<li><img src="image-20220421194649682.png" alt="image-20220421194649682"></li>
</ol>
</li>
<li><p>根目录创建 <strong>.lintstagedrc.json</strong> 文件控制检查和操作方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [<span class="string">&quot;prettier --write .&quot;</span>, <span class="string">&quot;eslint  --fix&quot;</span>],</span><br><span class="line">    <span class="string">&quot;*.md&quot;</span>: [<span class="string">&quot;prettier --write&quot;</span>],</span><br><span class="line">    <span class="string">&quot;*.&#123;less,css&#125;&quot;</span>: [<span class="string">&quot;stylelint --fix&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="二、提交信息规范"><a href="#二、提交信息规范" class="headerlink" title="二、提交信息规范"></a>二、提交信息规范</h1><ol>
<li><p>安装提交信息依赖 <a href="https://www.npmjs.com/package/@commitlint/config-conventional">@commitlint/config-conventional</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i commitlint @commitlint/config-conventional -D</span><br></pre></td></tr></table></figure></li>
<li><p>添加对应的shell调用方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20220422165135542.png" alt="image-20220422165135542"></p>
</li>
<li><p>添加commitlint配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;;&quot;</span> &gt; commitlint.config.js</span><br></pre></td></tr></table></figure>

<p>.commitlint.config.js中配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>package.json中添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;commitlint&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;@commitlint/config-conventional&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>至此，就可以规范commit提交信息了。</p>
<p>接下来，我们来了解一下commit-msg所使用到的依赖规范具体是什么样的？</p>
</li>
</ol>
<h2 id="2-1-commitlint-config-conventional"><a href="#2-1-commitlint-config-conventional" class="headerlink" title="2.1 @commitlint/config-conventional"></a>2.1 @commitlint/config-conventional</h2><ol>
<li><p><strong>@commitlint/config-conventional</strong> 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是<em><strong>Angular</strong></em>的提交规范</p>
</li>
<li><p><a href="https://www.conventionalcommits.org/en/v1.0.0/">具体规范地址</a></p>
</li>
<li><p>Commit message的格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>commit messgae分为三个部分</p>
<ol>
<li>标题行(subject)： 必填, 描述主要修改类型和内容。</li>
<li>主题内容(body)：描述为什么修改, 做了什么样的修改, 以及开发的思路等等。</li>
<li>页脚注释(footer)：可以写注释，放 BUG 号的链接。</li>
</ol>
</li>
<li><p>各配置</p>
<ol>
<li>type类型<ul>
<li>feat: 新功能、新特性</li>
<li>fix: 修改 bug</li>
<li>perf: 更改代码，以提高性能（在不影响代码内部行为的前提下，对程序性能进行优化）</li>
<li>refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改）</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改（例如分号修改）</li>
<li>test: 测试用例新增、修改</li>
<li>build: 影响项目构建或依赖项修改</li>
<li>revert: 恢复上一次提交</li>
<li>ci: 持续集成相关文件修改</li>
<li>chore: 其他修改（不在上述类型中的修改）</li>
<li>release: 发布新版本</li>
</ul>
</li>
<li>scope 影响的功能或文件范围, 比如: route, component, utils, build…</li>
<li>commit message 影响的功能或文件范围, 比如: route, component, utils, build…</li>
<li>body 具体修改内容, 可以分为多行.</li>
<li>Footer 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ol>
</li>
<li><p>例子 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fix: prevent racing <span class="keyword">of</span> requests</span><br><span class="line"></span><br><span class="line">Introduce a request id and a reference to latest request. Dismiss</span><br><span class="line">incoming responses other than <span class="keyword">from</span> latest request.</span><br><span class="line"></span><br><span class="line">Remove timeouts which were used to mitigate the racing issue but are</span><br><span class="line">obsolete now.</span><br><span class="line"></span><br><span class="line">Reviewed-by: Z</span><br><span class="line"><span class="attr">Refs</span>: #<span class="number">123</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/7038143752036155428#heading-5">Eslint + Prettier + Husky + Commitlint+ Lint-staged 规范前端工程代码规范</a></p>
]]></content>
      <categories>
        <category>前端工程</category>
      </categories>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-19.删除链表的倒数第N个结点</title>
    <url>/2022/02/12/leetcode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<p>[来源] 🔗<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<p><img src="image.png" alt="image"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>], n = <span class="number">1</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>], n = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><ol>
<li>我们可以先把链表的总长度len求出来</li>
<li>len - N 就是我们正序遍历需要删除的倒数第N个节点</li>
<li>那么我们就可以定位到len - N - 1的节点，进行一个删除的动作</li>
</ol>
<h1 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> * <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"> *     val: number</span><br><span class="line"> *     next: ListNode | <span class="literal">null</span></span><br><span class="line"> *     <span class="function"><span class="title">constructor</span>(<span class="params">val?: number, next?: ListNode | <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line"> *         <span class="built_in">this</span>.val = (val===<span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line"> *         <span class="built_in">this</span>.next = (next===<span class="literal">undefined</span> ? <span class="literal">null</span> : next)</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNthFromEnd</span>(<span class="params">head: ListNode | <span class="literal">null</span>, n: number</span>): <span class="title">ListNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    pNode.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span></span><br><span class="line">        len = <span class="number">0</span>, <span class="comment">// 统计链表长度</span></span><br><span class="line">        temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = pNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - n; i++) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp.next = temp.next.next;</span><br><span class="line">    <span class="keyword">return</span> pNode.next;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><ol>
<li>定义双指针p，q</li>
<li>让q前移N个节点，p此时仍处于原位，那么q和p的距离就是N</li>
<li>此时同时移动p,q，那么到q指向null的时候，p刚好就指向要被删除的节点的前一个节点</li>
</ol>
<h1 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNthFromEnd</span>(<span class="params">head: ListNode | <span class="literal">null</span>, n: number</span>): <span class="title">ListNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummyHead.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p = dummyHead, q = dummyHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.next = p.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-283.移动零</title>
    <url>/2022/02/09/leetcode-283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    <content><![CDATA[<p>[来源] 🔗<a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">12</span>]</span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>这里由于只需要将0移动到数组的末尾，所以我们考虑在遍历数组的时候直接跳过0，等后续再去补齐。</li>
<li>题目要求原地对数组进行操作，意味着我们需要定义一个变量来记录从哪里开始补齐0。</li>
<li>使用双指针，快指针不断向右移动，遍历数组元素，慢指针用于记录已经处理好的序列的尾部。</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveZeroes</span>(<span class="params">nums: number[]</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] !== <span class="number">0</span>) &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(slow &lt; nums.length) &#123;</span><br><span class="line">        nums[slow++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-55.跳跃游戏</title>
    <url>/2022/02/12/leetcode-55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>[来源] 🔗<a href="https://leetcode-cn.com/problems/jump-game/">55. 跳跃游戏</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个下标。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可以先跳 <span class="number">1</span> 步，从下标 <span class="number">0</span> 到达下标 <span class="number">1</span>, 然后再从下标 <span class="number">1</span> 跳 <span class="number">3</span> 步到达最后一个下标。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：无论怎样，总会到达下标为 <span class="number">3</span> 的位置。但该下标的最大跳跃长度是 <span class="number">0</span> ， 所以永远不可能到达最后一个下标。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li><p>首先这个思路和数组元素的索引值关系非常大。</p>
</li>
<li><p>对于数组 [2, 3, 1, 1, 4] 我们尽可能的取最大的跳跃长度，那么最大跳跃长度能跳到的索引位置为 <a href="%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E7%BB%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0">2, 4, 3, 4</a></p>
<p> 我们可以得出 k = Math.max(k, nums[i] + i)， k为能够跳到的最远位置。 </p>
<p> 如果此时k == nums.length - 1 那么就能够到达最后一个标</p>
</li>
<li><p>此时考虑到以下情况，[1, 0, 2, 1, 4]，针对每一个元素，最大跳跃长度能跳到的索引位置为[1, 1, 4, 4]。但是此时i = 1时，不能进行跳跃，也就是无法跳到下一个节点，那么尽管后面的元素跳跃长度能够到达最后一个下标，此时结果也为false。</p>
<p> 所以我们需要通过i 和 k值进行对比，当且仅当i ≤ k时，该节点能够进行下一个跳跃</p>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canJump</span>(<span class="params">nums: number[]</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>, len = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; maxLen) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        maxLen = <span class="built_in">Math</span>.max(maxLen, nums[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-6006.拿出最少数目的魔法豆</title>
    <url>/2022/02/13/leetcode-6006-%E6%8B%BF%E5%87%BA%E6%9C%80%E5%B0%91%E6%95%B0%E7%9B%AE%E7%9A%84%E9%AD%94%E6%B3%95%E8%B1%86/</url>
    <content><![CDATA[<p>[来源] 🔗6006.拿出最少数目的魔法豆</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个 正 整数数组 beans ，其中每个整数表示一个袋子里装的魔法豆的数目。</p>
<p>请你从每个袋子中 拿出 一些豆子（也可以 不拿出），使得剩下的 非空 袋子中（即 至少 还有 一颗 魔法豆的袋子）魔法豆的数目 相等 。一旦魔法豆从袋子中取出，你不能将它放到任何其他的袋子中。</p>
<p>请你返回你需要拿出魔法豆的 最少数目。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：beans = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：</span><br><span class="line">- 我们从有 <span class="number">1</span> 个魔法豆的袋子中拿出 <span class="number">1</span> 颗魔法豆。</span><br><span class="line">  剩下袋子中魔法豆的数目为：[<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">- 然后我们从有 <span class="number">6</span> 个魔法豆的袋子中拿出 <span class="number">2</span> 个魔法豆。</span><br><span class="line">  剩下袋子中魔法豆的数目为：[<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">- 然后我们从有 <span class="number">5</span> 个魔法豆的袋子中拿出 <span class="number">1</span> 个魔法豆。</span><br><span class="line">  剩下袋子中魔法豆的数目为：[<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">总共拿出了 <span class="number">1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">4</span> 个魔法豆，剩下非空袋子中魔法豆的数目相等。</span><br><span class="line">没有比取出 <span class="number">4</span> 个魔法豆更少的方案。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li><p> 拿出魔法豆 + 剩余魔法豆 = 初始魔法豆</p>
</li>
<li><p>考虑拿出最少数目的魔法豆，可以转化为剩余最多的魔法豆。</p>
</li>
<li><p>beans数组的长度为n，对于每个i袋子，可以剩余的最多魔法豆为</p>
<p> (n - i) * beans[i]</p>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minimumRemoval</span>(<span class="params">beans: number[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> </span><br><span class="line">        len = beans.length,</span><br><span class="line">        sum = <span class="number">0</span>,</span><br><span class="line">        maxSum = <span class="number">0</span>; <span class="comment">// 针对每个袋子可以拿出的魔法豆</span></span><br><span class="line">    beans.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; beans.length; i++) &#123;</span><br><span class="line">        sum += beans[i];</span><br><span class="line">        maxSum = <span class="built_in">Math</span>.max(maxSum, beans[i] * (len - i) )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum - maxSum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack升级v4-v5踩坑记</title>
    <url>/2022/01/22/webpack%E5%8D%87%E7%BA%A7v4-v5%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<p>关于一些我升级webpack版本的踩坑记录～～～～～</p>
<span id="more"></span>
<h1 id="报错1-copy-webpack-plugin"><a href="#报错1-copy-webpack-plugin" class="headerlink" title="报错1 copy-webpack-plugin"></a>报错1 copy-webpack-plugin</h1><p><img src="1.png" alt="1.png"></p>
<p>之前写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>: _src_path + <span class="string">&#x27;/assets&#x27;</span>,</span><br><span class="line">    <span class="attr">to</span>: _build_pro_path + <span class="string">&#x27;/assets&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">]),</span><br></pre></td></tr></table></figure>

<p>升级后写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">  <span class="attr">patterns</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: _src_path + <span class="string">&#x27;/assets&#x27;</span>,</span><br><span class="line">      <span class="attr">to</span>: _build_pro_path + <span class="string">&#x27;/assets&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: _src_path + <span class="string">&#x27;/iuap-cmdm-fun&#x27;</span>,</span><br><span class="line">      <span class="attr">to</span>: _build_pro_path + <span class="string">&#x27;/iuap-cmdm-fun&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<h1 id="报错2-hard-source-webpack-plugin"><a href="#报错2-hard-source-webpack-plugin" class="headerlink" title="报错2 hard-source-webpack-plugin"></a>报错2 hard-source-webpack-plugin</h1><p><img src="2.png" alt="image-20220118204432823"></p>
<p>可以看到是hard-source-webpack-plugin的问题，webpack5内置了缓存策略，所以就不需要使用该插件了。</p>
<h1 id="报错3-html-webpack-include-assets-plugin"><a href="#报错3-html-webpack-include-assets-plugin" class="headerlink" title="报错3 html-webpack-include-assets-plugin"></a>报错3 html-webpack-include-assets-plugin</h1><p><img src="3.png" alt="image-20220120140015085"></p>
<p>是因为html-webpack-include-assets-plugin的npm包改名为<strong>html-webpack-tags-plugin</strong>了，重新</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i -D html-webpack-tags-plugin</span><br></pre></td></tr></table></figure>

<p>修改包引入方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackIncludeAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-tags-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="报错4-less-loader"><a href="#报错4-less-loader" class="headerlink" title="报错4 less-loader"></a>报错4 less-loader</h1><p><img src="4.png" alt="image-20220120190613588"></p>
<p>是less-loader插件报的错, 升级后的版本已经不支持旧版本的写法。</p>
<p>旧版本写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">javascriptEnabled</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新版本写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">      <span class="attr">javascriptEnabled</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="报错5-webpack5不自动引入Polyfills"><a href="#报错5-webpack5不自动引入Polyfills" class="headerlink" title="报错5 webpack5不自动引入Polyfills"></a>报错5 webpack5不自动引入Polyfills</h1><p><img src="6.png" alt="image-20220120192356906"></p>
<p>报错原因：</p>
<p>v4以前附带了许多<a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>.js核心模块的<code>polyfill</code>，在构建时给 bundle附加了庞大的polyfills，在大部分情况下，polyfills并不是必须。</p>
<p>所以现在v5将要停止这一切，在模块的应用中不再自动引入<code>Polyfills</code>，明显的减小了打包体积。</p>
<p>如果我们要使用这个polyfill我们就在resolve.fallback中引入，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">      <span class="attr">fallback</span>: &#123;</span><br><span class="line">        <span class="attr">util</span>: <span class="built_in">require</span>.resolve(<span class="string">&#x27;util/&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果确认这个polyfill我们没有使用，可以不引入，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="attr">fallback</span>: &#123;</span><br><span class="line">    <span class="attr">util</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220122110507900](10.png)</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">    fallback: &#123;</span><br><span class="line">      util: false,</span><br><span class="line">      crypto: false,</span><br><span class="line">      path: false</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>



<h1 id="报错6-资源模块"><a href="#报错6-资源模块" class="headerlink" title="报错6 资源模块"></a>报错6 资源模块</h1><p><img src="7.png" alt="image-20220120195255483"></p>
<p>未升级版本时写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">      <span class="attr">outputPath</span>: <span class="string">&#x27;fonts&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过查看webpack5官网后，发现以下一段话</p>
<blockquote>
<p>当在 webpack 5 中使用旧的 assets loader（如 <code>file-loader</code>/<code>url-loader</code>/<code>raw-loader</code> 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 <code>&#39;javascript/auto&#39;</code> 来解决。</p>
</blockquote>
<p>解决方式</p>
<ol>
<li>添加type: ‘javascript/auto’</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">esModule</span>: <span class="literal">false</span>, <span class="comment">// 不加的话会有这种情况 img属性src=&quot;[object Module]&quot;</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">      <span class="attr">outputPath</span>: <span class="string">&#x27;fonts&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;javascript/auto&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>使用资源模块类型</p>
<ol>
<li>使用方式</li>
</ol>
<blockquote>
<ul>
<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>
<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li>
<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>
<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>
</ul>
</blockquote>
<ol start="2">
<li>这里通过asset实现</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/</span>,</span><br><span class="line">  type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;fonts/[name].[ext]&quot;</span></span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">8196</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="报错7-html-webpack-plugin"><a href="#报错7-html-webpack-plugin" class="headerlink" title="报错7 html-webpack-plugin"></a>报错7 html-webpack-plugin</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span>   <span class="built_in">Error</span>: The loader <span class="string">&quot;/Users/chenlili/yonyou/versionTotal/develop-cll-test-webpack/iuap_cmdm_front/node_modules/html-webpack-plugin/lib/loader.js!/Users/chenlili/yonyou/versionTotal/develop-cll-test-webpac  k/iuap_cmdm_front/src/pages/model-management/flow-model/index.html&quot;</span> didn<span class="string">&#x27;t return html.</span></span><br></pre></td></tr></table></figure>

<p><img src="11.png" alt="image-20220122101322313"></p>
<p>发现这个问题的时候直接百度了，看到有哥们说是html-webpack-plugin内置代码的问题，他修改了源码，但是我觉得这种处理方式不太完美，就打开了html-webpack-plugin在github的issues。确实有人遇到了同样的问题，给出的解决方式是升级html-webpack-plugin版本，于是我升级到了5.5.0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin@<span class="number">5.5</span><span class="number">.0</span> -D</span><br></pre></td></tr></table></figure>

<p>至此，单模块的打包可算是构建成功了。</p>
<p><img src="12.png" alt="image-20220122102521491"></p>
<blockquote>
<p> 接下来尝试整个项目打包，看看会遇到什么问题？</p>
</blockquote>
<p>开始了新一轮的WARNING和Error！！！</p>
<h1 id="报错8-react-dnd"><a href="#报错8-react-dnd" class="headerlink" title="报错8 react-dnd"></a>报错8 react-dnd</h1><p><img src="13.png" alt="image-20220122105143120"></p>
<p>应该是react-dnd的问题，升级react-dnd @9.4.0 -&gt; 最新版本@14.5.0</p>
<h1 id="报错9-react-dnd-html5-backend"><a href="#报错9-react-dnd-html5-backend" class="headerlink" title="报错9 react-dnd-html5-backend"></a>报错9 react-dnd-html5-backend</h1><p><img src="14.png" alt="image-20220122110741387"></p>
<p>盲猜react-dnd-html5-backend问题，升级react-dnd-html5-backend最新版本。</p>
<p>出现一个warning</p>
<p><img src="15.png" alt="image-20220122111828816"></p>
<p>源代码引入方式</p>
<p><img src="16.png" alt="image-20220122111849687"></p>
<p>更改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HTML5Backend&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dnd-html5-backend&#x27;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2022/04/19/%E3%80%8A%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E3%80%8B%E5%AE%9E%E8%B7%B5-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="一、代码规范"><a href="#一、代码规范" class="headerlink" title="一、代码规范"></a>一、代码规范</h1><p>工程没有具体统一的规范，包括有<code>代码格式</code> , <code>命名规范</code> , <code>文档注释</code> 。现在每个人都有自己的代码规范造成项目存在几种不同的规范，难以阅读。</p>
<span id="more"></span>


<p>统一代码规范不仅可以让程序员编写易于阅读、可维护性的代码，还有其他好处</p>
<ol>
<li>规范的代码可以促进团队合作</li>
<li>规范的代码可以降低维护成本</li>
<li>规范的代码有助于 code review（代码审查）</li>
<li>养成代码规范的习惯，有助于程序员自身的成长</li>
</ol>
<p>因此，我们就需要为我们的项目指定一套统一的代码规范。</p>
<!--more-->


<h1 id="二、如何制定代码规范"><a href="#二、如何制定代码规范" class="headerlink" title="二、如何制定代码规范"></a>二、如何制定代码规范</h1><p>现在有很多优秀的开源代码规范，因此我们不需要从头开始制定一份代码规范，我们可以在优秀的代码规范上结合团队的需求作个性化修改。</p>
<p>下面列举一些比较出名的 JavaScript 代码规范：</p>
<ul>
<li><a href="https://github.com/airbnb/javascript">airbnb (101k star 英文版) (opens new window)</a>，<a href="https://github.com/lin-123/javascript">airbnb-中文版(opens new window)</a></li>
<li><a href="https://github.com/standard/standard/blob/master/docs/README-zhcn.md">standard (24.5k star) 中文版(opens new window)</a></li>
<li><a href="https://github.com/ecomfe/spec">百度前端编码规范 3.9k star(opens new window)</a></li>
</ul>
<p>CSS 代码规范也有不少，例如：</p>
<ul>
<li><a href="https://github.com/fex-team/styleguide/blob/master/css.md">styleguide 2.3k star(opens new window)</a></li>
<li><a href="https://github.com/ecomfe/spec/blob/master/css-style-guide.md">spec 3.9k star(opens new window)</a></li>
</ul>
<h1 id="三、如何检查代码规范"><a href="#三、如何检查代码规范" class="headerlink" title="三、如何检查代码规范"></a>三、如何检查代码规范</h1><ol>
<li>使用工具校验代码格式。</li>
<li>利用code review审查变量命名、注释。</li>
</ol>
<p>接来下我们来看一下如何使用工具校验代码格式</p>
<ol>
<li>使用<code>Eslint</code>负责找出代码中的错误</li>
<li>使用<code>Prettier</code>负责代码格式化</li>
</ol>
<h2 id="3-1-Eslint配置"><a href="#3-1-Eslint配置" class="headerlink" title="3.1 Eslint配置"></a>3.1 Eslint配置</h2><h3 id="3-1-1-总览"><a href="#3-1-1-总览" class="headerlink" title="3.1.1 总览"></a>3.1.1 总览</h3><p><strong>基础</strong></p>
<ol>
<li><code>eslint</code> : lint代码的主要工具</li>
</ol>
<p><strong>解析器</strong></p>
<ol>
<li><code>babel-eslint</code> 该依赖包允许你使用一些实验特性的时候，依然能够用上Eslint语法检查。反过来说，当你代码并没有用到Eslint不支持的实验特性的时候是不需要安装此依赖包的。</li>
<li><code>@typescript-eslint/parser </code>  Typescript语法的解析器，类似于<code>babel-eslint</code>解析器一样。对应<code>parserOptions</code>的配置参考官方的README。</li>
</ol>
<p><strong>扩展的配置</strong></p>
<ol>
<li><code>eslint-config-airbnb</code> 该包提供了所有的Airbnb的ESLint配置，作为一种扩展的共享配置，你是可以修改覆盖掉某些不需要的配置的，<strong>该工具包包含了react的相关Eslint规则(eslint-plugin-react与eslint-plugin-jsx-a11y)，所以安装此依赖包的时候还需要安装刚才提及的两个插件</strong></li>
<li><code>eslint-config-airbnb-base</code> 与上一个包的区别是，此依赖包不包含react的规则，一般用于服务端检查。</li>
<li><code>eslint-config-prettier</code> 将会禁用掉所有那些非必须或者和<a href="https://link.juejin.cn/?target=https://github.com/prettier/prettier">prettier</a>冲突的规则。这让您可以使用您最喜欢的shareable配置，而不让它的风格选择在使用Prettier时碍事。请注意该配置<strong>只是</strong>将规则<strong>off</strong>掉,所以它只有在和别的配置一起使用的时候才有意义。</li>
</ol>
<p><strong>插件</strong></p>
<ol>
<li><code>eslint-plugin-babel</code> 和babel-eslint一起用的一款插件。babel-eslint在将eslint应用于Babel方面做得很好，但是它不能更改内置规则来支持实验性特性。eslint-plugin-babel重新实现了有问题的规则，因此就不会误报一些错误信息</li>
<li><code>eslint-plugin-import</code>该插件想要支持对ES2015+ (ES6+) import/export语法的校验, 并防止一些文件路径拼错或者是导入名称错误的情况</li>
<li><code>eslint-plugin-jsx-a11y</code> 该依赖包专注于检查JSX元素的可访问性。</li>
<li><code>eslint-import-resolve-webpack</code> 可以借助webpack的配置来辅助eslint解析，最有用的就是alias，从而避免unresolved的错误</li>
<li><code>eslint-import-resolver-alias</code> 解决我们在webpack中配置别名，但是eslint无法鉴别出来的问题，可以利用该插件进行额外的处理。</li>
<li><code>eslint-plugin-react</code> React专用的校验规则插件.</li>
<li><code>eslint-plugin-react-hooks</code> 利用该插件对hooks特性的代码作校验。</li>
<li><code>eslint-plugin-prettier</code> 该插件辅助Eslint可以平滑地与Prettier一起协作，并将Prettier的解析作为Eslint的一部分，在最后的输出可以给出修改意见。这样当Prettier格式化代码的时候，依然能够遵循我们的Eslint规则。如果你禁用掉了所有和代码格式化相关的Eslint规则的话，该插件可以更好得工作。所以你可以使用eslint-config-prettier禁用掉所有的格式化相关的规则(如果其他有效的Eslint规则与prettier在代码如何格式化的问题上不一致的时候，报错是在所难免的了)</li>
</ol>
<h3 id="3-1-2-配置"><a href="#3-1-2-配置" class="headerlink" title="3.1.2 配置"></a>3.1.2 配置</h3><h4 id="3-1-2-1-各属性"><a href="#3-1-2-1-各属性" class="headerlink" title="3.1.2.1 各属性"></a>3.1.2.1 各属性</h4><hr>
<ol>
<li><p>env: 预定义那些环境需要用到的全局变量，可用的参数是：<code>es6</code>、<code>broswer</code>、<code>node</code>等。</p>
<p><code>es6</code>会使能所有的ECMAScript6的特性除了模块(这个功能在设置ecmaVersion版本为6的时候会自动设置)</p>
<p><code>browser</code>会添加所有的浏览器变量比如Windows</p>
<p><code>node</code>会添加所有的全局变量比如<code>global</code></p>
<p>更多环境配置参考<a href="https://link.juejin.cn/?target=https://eslint.org/docs/user-guide/configuring%23specifying-environments">Specifying Environments</a></p>
</li>
<li><p>extends: 指定扩展的配置，配置支持递归扩展，支持规则的覆盖和聚合。</p>
</li>
<li><p>plugins: 配置那些我们想要Linting规则的插件。</p>
</li>
<li><p>parser: 默认ESlint使用<a href="https://link.juejin.cn/?target=https://github.com/eslint/espree">Espree</a>作为解析器，但是一旦我们使用babel的话，我们需要用babel-eslint。</p>
</li>
<li><p>parserOptions: 当我们将默认的解析器从Espree改为babel-eslint的时候，我们需要指定parseOptions，这个是必须的。</p>
<p>ecmaVersion: 默认值是5，可以设置为3、5、6、7、8、9、10，用来指定使用哪一个ECMAScript版本的语法。也可以设置基于年份的JS标准，比如2015(ECMA 6)</p>
<p>sourceType: 如果你的代码是ECMAScript 模块写的，该字段配置为<code>module</code>，否则为<code>script</code>(默认值)</p>
<p>ecmaFeatures：该对象指示你想使用的额外的语言特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">globalReturn：允许全局范围内的`return`语句</span><br><span class="line">   </span><br><span class="line">impliedStrict：使能全局`strict`模式</span><br><span class="line">   </span><br><span class="line">jsx：使能JSX</span><br></pre></td></tr></table></figure></li>
<li><p>rules: 自定义规则，可以覆盖掉extends的配置。</p>
</li>
<li><p>settings：该字段定义的数据可以在所有的插件中共享。这样每条规则执行的时候都可以访问这里面定义的数据</p>
</li>
</ol>
<p>更多配置选项参考官方文档<a href="https://link.juejin.cn/?target=https://eslint.org/docs/user-guide/configuring">Eslint</a></p>
<hr>
<h4 id="3-1-2-2-配置"><a href="#3-1-2-2-配置" class="headerlink" title="3.1.2.2 配置"></a>3.1.2.2 配置</h4><ol>
<li>在项目根目录新建.eslintrc.js文件</li>
<li>配置规则</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&#x27;airbnb&#x27;</span>, <span class="string">&#x27;airbnb/hooks&#x27;</span>],</span><br><span class="line">    <span class="attr">ignorePatterns</span>: [<span class="string">&#x27;node_modules/&#x27;</span>, <span class="string">&#x27;ucf-publish/&#x27;</span>, <span class="string">&#x27;ucf.config.js&#x27;</span>, <span class="string">&#x27;ucf-common/static/&#x27;</span>],</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span>,</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">            <span class="attr">jsx</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">ecmaVersion</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">allowImportExportEverywhere</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">        <span class="attr">requireConfigFile</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">babelOptions</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 0 不启用 1 警告 2 禁用</span></span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="comment">// 特殊rules配置</span></span><br><span class="line">        <span class="string">&#x27;import/no-extraneous-dependencies&#x27;</span>: [</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">devDependencies</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">optionalDependencies</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">peerDependencies</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">packageDir</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;react/jsx-filename-extension&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;import/extensions&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;no-debugger&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止使用debugger</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">node</span>: &#123;</span><br><span class="line">                <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>],</span><br><span class="line">                <span class="attr">paths</span>: [<span class="string">&#x27;./ucf-common&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">alias</span>: &#123;</span><br><span class="line">                <span class="attr">map</span>: [</span><br><span class="line">                    [<span class="string">&#x27;components&#x27;</span>, <span class="string">&#x27;./ucf-common/src/components/&#x27;</span>], <span class="comment">// 别名路径</span></span><br><span class="line">                    [<span class="string">&#x27;utils&#x27;</span>, <span class="string">&#x27;./ucf-common/src/utils/&#x27;</span>], <span class="comment">// 别名路径</span></span><br><span class="line">                    [<span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;./ucf-common/src/static/&#x27;</span>], <span class="comment">// 别名路径</span></span><br><span class="line">                    [<span class="string">&#x27;styles&#x27;</span>, <span class="string">&#x27;./ucf-common/src/styles/&#x27;</span>], <span class="comment">// 别名路径</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>检测项目存在的问题</p>
<ol>
<li>使用 <code>npm eslint &#39;指定文件&#39;</code> 检测某一文件</li>
</ol>
</li>
<li><p>修正代码中的格式问题</p>
<ol>
<li>使用<code>npx eslint xxx.js --fix</code>来修正代码中的部分格式问题</li>
</ol>
</li>
<li><p>可以通过使用 VSCode插件来在代码中给出代码错误提示。</p>
<ol>
<li><p>下载插件Eslint</p>
<p><img src="image-20220417163546554.png" alt="image-20220417163546554"></p>
<ol start="2">
<li><p>在settings.json中进行配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;eslint.options&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li>
<li><p>验证Eslint校验是否开启 </p>
<p>可以通过vscode右下角的Eslint判断我们所配置的是否生效了。</p>
<p><img src="image-20220417164911943.png" alt="image-20220417164911943"></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="3-2-Prettier配置"><a href="#3-2-Prettier配置" class="headerlink" title="3.2 Prettier配置"></a>3.2 Prettier配置</h2><blockquote>
<p>将Prettier集成在Eslint中，Eslint的配置可能会和Prettier的配置相冲突，因此我们可以通过eslint-config-prettier来关闭冲突规则。</p>
</blockquote>
<h3 id="3-2-1-总览"><a href="#3-2-1-总览" class="headerlink" title="3.2.1 总览"></a>3.2.1 总览</h3><ol>
<li><code>prettier</code> 原始实现版本，定义了prettier规则并实现这些规则。</li>
<li><code>eslint-config-prettier</code> 关闭<code>eslint</code>中与<code>prettier</code>相互冲突的规则。</li>
<li><code>eslint-plugin-prettier</code> 赋予<code>eslint</code>用<code>prettier</code>格式化代码的能力。</li>
</ol>
<blockquote>
<p>最基础的是prettier，然后你需要用eslint-config-prettier去禁用掉所有和prettier冲突的规则，这样才可以使用eslint-plugin-prettier去以符合eslint规则的方式格式化代码并提示对应的修改建议。</p>
</blockquote>
<h3 id="3-2-2-配置"><a href="#3-2-2-配置" class="headerlink" title="3.2.2 配置"></a>3.2.2 配置</h3><ol>
<li>修改<code>.eslintrc.js</code>文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">extends</span>: [<span class="string">&#x27;airbnb&#x27;</span>, <span class="string">&#x27;airbnb/hooks&#x27;</span>]</span><br><span class="line">+ <span class="keyword">extends</span>: [<span class="string">&#x27;airbnb&#x27;</span>, <span class="string">&#x27;airbnb/hooks&#x27;</span>, <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>规则<code>plugin:prettier/recommended</code> 做了什么？</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/eslint-plugin-prettier/eslint-plugin-prettier.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// plugin:prettier/recommended 就是加载这个</span></span><br><span class="line">  <span class="attr">configs</span>: &#123;</span><br><span class="line">    <span class="attr">recommended</span>: &#123;</span><br><span class="line">      <span class="attr">extends</span>: [<span class="string">&#x27;prettier&#x27;</span>],</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="string">&#x27;prettier&#x27;</span>],</span><br><span class="line">      <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;prettier/prettier&#x27;</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arrow-body-style&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;prefer-arrow-callback&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在项目根目录新建<code>.prettierrc.js</code>文件</li>
<li>配置规则</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">printWidth</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">tabWidth</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">semi</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useTabs</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">trailingComma</span>: <span class="string">&#x27;es5&#x27;</span>,</span><br><span class="line">    <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>格式化代码</p>
<ol>
<li><p>格式化全部文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npx prettier --write .</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">yarn prettier --write .</span><br></pre></td></tr></table></figure></li>
<li><p>格式化指定文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npx prettier --write src/components/Button.js</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">yarn prettier --write src/components/Button.js</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>检查文档是否已格式化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npx prettier --check .</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">yarn prettier --check .</span><br><span class="line"><span class="comment">//检查指定文件同上</span></span><br></pre></td></tr></table></figure></li>
<li><p>同样的，我们安装vscode中的<code>Prettier</code>，这样就可以运用编辑器快捷键进行格式化。</p>
<p><img src="image-20220417170410876.png" alt="image-20220417170410876"></p>
</li>
<li><p>在<code>.setting.json</code>文件中配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-3-检查CSS规范"><a href="#3-3-检查CSS规范" class="headerlink" title="3.3 检查CSS规范"></a>3.3 检查CSS规范</h2><h3 id="3-3-1-总览"><a href="#3-3-1-总览" class="headerlink" title="3.3.1 总览"></a>3.3.1 总览</h3><ol>
<li><code>stylelint</code>  运行工具</li>
<li><code>stylelint-config-standard</code>  是stylelint的推荐配置</li>
<li><code>stylelint-order</code>是用来在格式化css文件时对代码的属性进行排序。</li>
<li> <code>stylelint-config-css-modules</code> 是<code>css-module</code>的方案来处理样式文件</li>
</ol>
<h3 id="3-3-2-配置"><a href="#3-3-2-配置" class="headerlink" title="3.3.2 配置"></a>3.3.2 配置</h3><ol>
<li>在项目根目录新建<code>.stylelintrc.js</code> 文件</li>
<li>配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .stylelintrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">processors</span>: [],</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&#x27;stylelint-order&#x27;</span>],</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&#x27;stylelint-config-standard&#x27;</span>, <span class="string">&#x27;stylelint-config-css-modules&#x27;</span>],</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;string-quotes&#x27;</span>: <span class="string">&#x27;single&#x27;</span>, <span class="comment">// 单引号</span></span><br><span class="line">        <span class="string">&#x27;at-rule-empty-line-before&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;at-rule-no-unknown&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;at-rule-name-case&#x27;</span>: <span class="string">&#x27;lower&#x27;</span>, <span class="comment">// 指定@规则名的大小写</span></span><br><span class="line">        <span class="string">&#x27;length-zero-no-unit&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止零长度的单位（可自动修复）</span></span><br><span class="line">        <span class="string">&#x27;shorthand-property-no-redundant-values&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 简写属性</span></span><br><span class="line">        <span class="string">&#x27;number-leading-zero&#x27;</span>: <span class="string">&#x27;never&#x27;</span>, <span class="comment">// 小数不带0</span></span><br><span class="line">        <span class="string">&#x27;declaration-block-no-duplicate-properties&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止声明快重复属性</span></span><br><span class="line">        <span class="string">&#x27;no-descending-specificity&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class="line">        <span class="string">&#x27;selector-max-id&#x27;</span>: <span class="number">0</span>, <span class="comment">// 限制一个选择器中 ID 选择器的数量</span></span><br><span class="line">        <span class="string">&#x27;max-nesting-depth&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">indentation</span>: [</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 指定缩进  warning 提醒</span></span><br><span class="line">                <span class="attr">severity</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;order/properties-order&#x27;</span>: [</span><br><span class="line">            <span class="comment">// 规则顺序</span></span><br><span class="line">            <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;z-index&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;display&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;float&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;width&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;max-width&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;max-height&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;min-width&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;min-height&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;padding&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;padding-top&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;padding-right&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;padding-bottom&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;padding-left&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-top&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-right&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-bottom&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-left&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-collapse&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-top-collapse&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-right-collapse&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-bottom-collapse&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;margin-left-collapse&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;overflow-x&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;overflow-y&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;clip&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;clear&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font-family&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font-size&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font-smoothing&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;osx-font-smoothing&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font-style&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;font-weight&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;line-height&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;letter-spacing&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;word-spacing&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;color&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-align&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-decoration&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-indent&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-overflow&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-rendering&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-size-adjust&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-shadow&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text-transform&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;word-break&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;word-wrap&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;white-space&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vertical-align&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;list-style&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;list-style-type&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;list-style-position&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;list-style-image&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pointer-events&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;cursor&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;background-color&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;border&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;border-radius&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;outline&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;outline-offset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;size&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;transform&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>安装vscode-stylelint插件，实现保存时自动autoSave</p>
<ol>
<li><p><img src="image-20220418090151929.png" alt="image-20220418090151929"></p>
</li>
<li><p><code>Styleline</code>和<code>stylelint-plus</code>的区别是，stylelint-plus支持了保存时autoSave</p>
</li>
<li><p>配置vscode-setting.json文件 </p>
<blockquote>
<p> 参考 </p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;stylelint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;css&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sass&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>忽略lint文件</p>
<blockquote>
<p>项目中有一些不需要格式化的代码，我们可以配置在运行lint时忽略这些文件</p>
</blockquote>
<p>有三种方法可以起到忽略作用</p>
<ol>
<li>我们可以在<code>.stylelintrc.js</code>中配置<code>ignoreFiles</code>。</li>
<li>创建<code>.stylelintignore</code>文件。</li>
<li>我们可以通过 <code>/* stylelint-disable */</code>的方法，来对代码块进行忽略lint检测。</li>
</ol>
<p>这里我采用的是第二种方式</p>
<ol>
<li><p>新建<code>.stylelintignore</code> 文件</p>
</li>
<li><p>配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*.js</span><br><span class="line">*.tsx</span><br><span class="line">*.ts</span><br><span class="line">*.json</span><br><span class="line">*.png</span><br><span class="line">*.eot</span><br><span class="line">*.ttf</span><br><span class="line">*.woff</span><br><span class="line">*.css</span><br><span class="line">src/styles/antd-overrides.less</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://juejin.cn/post/6844903859488292871#heading-9">最全的Eslint配置模板，从此统一团队的编程习惯</a></li>
<li><a href="https://blog.csdn.net/qq_40618238/article/details/122021435">eslint或stylelint配置完之后vscode无法自动格式化问题的解决办法</a></li>
<li><a href="https://blog.csdn.net/weixin_41996102/article/details/121166987">stylelint 接入实战踩坑总结</a></li>
<li><a href="https://woai3c.gitee.io/introduction-to-front-end-engineering/02.html#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83">带你入门前端工程</a></li>
</ol>
]]></content>
      <categories>
        <category>前端工程</category>
      </categories>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>【若川视野 x 源码共读】第24期|vue2基础工具</title>
    <url>/2022/04/26/%E3%80%90%E8%8B%A5%E5%B7%9D%E8%A7%86%E9%87%8E-x-%E6%BA%90%E7%A0%81%E5%85%B1%E8%AF%BB%E3%80%91%E7%AC%AC24%E6%9C%9F-vue2%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><strong>本文参加了由<a href="https://link.juejin.cn/?target=https://lxchuan12.gitee.io" title="https://lxchuan12.gitee.io">公众号@若川视野</a> 发起的每周源码共读活动，<a href="https://juejin.cn/post/7079706017579139102" title="https://juejin.cn/post/7079706017579139102">点击了解详情一起参与。</a></strong></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol>
<li>这是跟随<a href="https://juejin.cn/user/1415826704971918">@若川</a> 源码活动的第二个打卡。</li>
<li>该期活动地址<a href="https://juejin.cn/post/7079765637437849614">【若川视野 x 源码共读】第24期 | vue2工具函数</a></li>
</ol>
<h1 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h1><h2 id="1-emptyObject"><a href="#1-emptyObject" class="headerlink" title="1. emptyObject"></a>1. emptyObject</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * Vue.js v2.6.14</span></span><br><span class="line"><span class="comment"> * (c) 2014-2021 Evan You</span></span><br><span class="line"><span class="comment"> * Released under the MIT License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*  */</span></span><br><span class="line"><span class="keyword">var</span> emptyObject = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://lxchuan12.gitee.io/js-object-api/#object-isfrozen-obj-es5"><strong>Object.freeze()</strong></a></p>
<blockquote>
<p><code>Object.freeze()</code> 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deadline = <span class="built_in">Object</span>.freeze(&#123;<span class="attr">date</span>: <span class="string">&#x27;yesterday&#x27;</span>&#125;);</span><br><span class="line">deadline.date = <span class="string">&#x27;tomorrow&#x27;</span>;</span><br><span class="line">deadline.excuse = <span class="string">&#x27;lame&#x27;</span>;</span><br><span class="line">deadline.date; <span class="comment">// &#x27;yesterday&#x27; 不可以修改已有属性的值</span></span><br><span class="line">deadline.excuse; <span class="comment">// undefined 不可以向这个对象中添加新的属性</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(deadline); <span class="comment">// true; </span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(deadline); <span class="comment">// true 判断对象是否冻结的方法</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(deadline, <span class="string">&#x27;date&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;value: &quot;yesterday&quot;, writable: false, enumerable: true, configurable: false&#125; (不可配置，不可写)</span></span><br><span class="line"><span class="built_in">Object</span>.keys(deadline); <span class="comment">// [&#x27;date&#x27;] (可枚举)</span></span><br></pre></td></tr></table></figure>

<h2 id="2-isUndef"><a href="#2-isUndef" class="headerlink" title="2. isUndef"></a>2. isUndef</h2><blockquote>
<p>判断是否是未定义</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// These helpers produce better VM code in JS engines due to their</span></span><br><span class="line"><span class="comment">// explicitness and function inlining.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUndef</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v === <span class="literal">undefined</span> || v === <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-isDef"><a href="#3-isDef" class="headerlink" title="3. isDef"></a>3. isDef</h2><blockquote>
<p>判断是否已经定义</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// These helpers produce better VM code in JS engines due to their</span></span><br><span class="line"><span class="comment">// explicitness and function inlining.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDef</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v !== <span class="literal">undefined</span> &amp;&amp; v !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-isTrue"><a href="#4-isTrue" class="headerlink" title="4. isTrue"></a>4. isTrue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTrue</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v === <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-isFalse"><a href="#5-isFalse" class="headerlink" title="5. isFalse"></a>5. isFalse</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFalse</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v === <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-isPrimitive"><a href="#6-isPrimitive" class="headerlink" title="6. isPrimitive"></a>6. isPrimitive</h2><blockquote>
<p>判断值是否是原始值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if value is primitive.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimitive</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> ||</span><br><span class="line">    <span class="comment">// $flow-disable-line</span></span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;symbol&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-isObject"><a href="#7-isObject" class="headerlink" title="7. isObject"></a>7. isObject</h2><blockquote>
<p>判断是否是对象，没有区分对象和数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Quick object check - this is primarily used to tell</span></span><br><span class="line"><span class="comment"> * Objects from primitive values when we know the value</span></span><br><span class="line"><span class="comment"> * is a JSON-compliant type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObejct</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; type <span class="keyword">of</span> === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-toRowType"><a href="#8-toRowType" class="headerlink" title="8. toRowType"></a>8. toRowType</h2><blockquote>
<p>转换成原始类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toRowType</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _toString.call(value).slice(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toRowType(<span class="string">&#x27;&#x27;</span>) <span class="comment">// &#x27;String&#x27;</span></span><br><span class="line">toRowType()<span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>为什么需要.slice(8, -1)</strong></p>
<ol>
<li>_toString.call(value) 生成结果[object String] 。</li>
<li><a href="%E4%BA%8C%E3%80%81vue-shared.md">二、vue-shared.md</a> __toString.call(value).slice(8, -1) 去掉[object和]。</li>
</ol>
<h2 id="9-isPlainObject"><a href="#9-isPlainObject" class="headerlink" title="9. isPlainObject"></a>9. isPlainObject</h2><blockquote>
<p>判断是否是纯对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _toString.call(obj) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isPlainObject(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line">isPlainObject([])</span><br></pre></td></tr></table></figure>

<h2 id="10-isRegExp"><a href="#10-isRegExp" class="headerlink" title="10. isRegExp"></a>10. isRegExp</h2><blockquote>
<p>判断是否是正则表达式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _toString.call(obj) === <span class="string">&#x27;[object RegExp]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-isValidArrayIndex"><a href="#11-isValidArrayIndex" class="headerlink" title="11. isValidArrayIndex"></a>11. isValidArrayIndex</h2><blockquote>
<p>判断是否是可用的数组索引值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidArrayIndex</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">parseFloat</span>(<span class="built_in">String</span>(val));</span><br><span class="line">  <span class="keyword">return</span> n &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">Math</span>.floor(n) === n &amp;&amp; <span class="built_in">isFinite</span>(val);、</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>为什么要使用parseFloat？</p>
<p>使用parseFloat可解析其他进制字符串时，有可能由于计算精度问题无法得到一个确定的十进制证书。</p>
</li>
<li><p>为什么使用isFinite</p>
<blockquote>
<p>is Finite()函数判断被传入的参数值是否为一个有限数值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isFinite</span>(<span class="literal">Infinity</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="literal">NaN</span>);       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(-<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">2e64</span>);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">&#x27;0&#x27;</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">&#x27;0&#x27;</span>) <span class="comment">// false </span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="12-isPromise"><a href="#12-isPromise" class="headerlink" title="12. isPromise"></a>12. isPromise</h1><blockquote>
<p>判断是否是promise</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funciton <span class="function"><span class="title">isPromise</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  	isDef(val) &amp;&amp; </span><br><span class="line">    <span class="keyword">typeof</span> val.then === <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> val.catch === <span class="string">&#x27;function&#x27;</span></span><br><span class="line"> 	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isPromise(<span class="keyword">new</span> <span class="built_in">Promise</span>()) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="13-toString转字符串"><a href="#13-toString转字符串" class="headerlink" title="13. toString转字符串"></a>13. toString转字符串</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> val == <span class="literal">null</span> </span><br><span class="line">		? <span class="string">&#x27;&#x27;</span> </span><br><span class="line">		: <span class="built_in">Array</span>.isArray(val) || (isPlainObject(val) &amp;&amp; val.toString === _toString)</span><br><span class="line">			? <span class="built_in">JSON</span>.stringify(val, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">			: <span class="built_in">String</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>数组或者对象并且对象的<code>toString</code> 方法是Object.prototype.toString，用JSON.stringify转换</p>
</li>
<li><p>JSON.stringify(val, null, 2)</p>
<ol>
<li><p>JSON.stringify(value, replacer, space)</p>
<ul>
<li><code>value</code> 序列化为一个JSON字符串的值</li>
<li><code>replacer</code> 如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。</li>
<li><code>space</code> 指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。</li>
</ul>
</li>
<li><p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">foundation</span>: <span class="string">&quot;Mozilla&quot;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;box&quot;</span>,</span><br><span class="line">  <span class="attr">week</span>: <span class="number">45</span>,</span><br><span class="line">  <span class="attr">transport</span>: <span class="string">&quot;car&quot;</span>,</span><br><span class="line">  <span class="attr">month</span>: <span class="number">7</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> jsonString = <span class="built_in">JSON</span>.stringify(foo, replacer);<span class="comment">// &#123;week: 45, month: 7&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="14-toNumber"><a href="#14-toNumber" class="headerlink" title="14. toNumber"></a>14. toNumber</h1><blockquote>
<p>转数字</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toNumber</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">parseFloat</span>(val);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">isNaN</span>(n) ? val : n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">toNumber(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">toNumber(<span class="string">&#x27;1&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">toNumber(<span class="string">&#x27;1a&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">toNumber(<span class="string">&#x27;a1&#x27;</span>) <span class="comment">// &#x27;a1&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="15-makeMap生成一个map"><a href="#15-makeMap生成一个map" class="headerlink" title="15. makeMap生成一个map"></a>15. makeMap生成一个map</h1><blockquote>
<p>传入一个以逗号分隔的字符串，生成一个map，并且返回一个函数检测key值在不在这个map中。第二个参数是小写选项。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入一个以逗号分隔的字符串，生成一个 map(键值对) ，并且返回一个函数检测 key 值在不在这个 map 中。第二个参数是小写选项。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>(<span class="params">str, expectsLowerCase</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">let</span> list = str.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    map[list[i]] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expectsLowerCase</span><br><span class="line">    ? <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> map[val.toLowerCase()]; &#125;</span><br><span class="line">    : <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> map[val] &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123,456,789&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> makeMapStrFunc = makeMap(str, <span class="literal">false</span>);</span><br><span class="line">makeMapStrFunc(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">makeMapStrFunc(<span class="string">&#x27;145&#x27;</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="16-isBuiltInTag"><a href="#16-isBuiltInTag" class="headerlink" title="16. isBuiltInTag"></a>16. isBuiltInTag</h1><blockquote>
<p>判断是否是内置的Tag</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isBuiltInTag = makeMap(<span class="string">&#x27;slot, component&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">isBuiltInTag(<span class="string">&#x27;slot&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isBuiltInTag(<span class="string">&#x27;component&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isBuiltInTag(<span class="string">&#x27;Slot&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isBuiltInTag(<span class="string">&#x27;Component&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="17-isReservedAttribute"><a href="#17-isReservedAttribute" class="headerlink" title="17. isReservedAttribute"></a>17. isReservedAttribute</h1><blockquote>
<p>判断是否是保留的属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isReservedAttribute = makeMap(<span class="string">&#x27;key,ref,slot,slot-scope,is&#x27;</span>);</span><br><span class="line"></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;ref&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;slot&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;slot-scope&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;is&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">isReservedAttribute(<span class="string">&#x27;IS&#x27;</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h1 id="18-remove"><a href="#18-remove" class="headerlink" title="18. remove"></a>18. remove</h1><blockquote>
<p>移除数组中的某一项</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = arr.indexOf(item);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>splice</code> 其实是一个很耗性能的方法。删除数组中的一项，其他元素都要移动位置。</p>
<p><strong>引申</strong>：<a href="https://link.juejin.cn/?target=https://github.com/axios/axios/blob/master/lib/core/InterceptorManager.js"><code>axios InterceptorManager</code> 拦截器源码</a> 中，拦截器用数组存储的。但实际移除拦截器时，只是把拦截器置为 <code>null</code> 。而不是用<code>splice</code>移除。最后执行时为 <code>null</code> 的不执行，同样效果。<code>axios</code> 拦截器这个场景下，不得不说为性能做到了很好的考虑。<strong>因为拦截器是用户自定义的，理论上可以有无数个，所以做性能考虑是必要的</strong>。</p>
<p>看如下 <code>axios</code> 拦截器代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码有删减</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="built_in">this</span>.handlers = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlers[id]) &#123;</span><br><span class="line"><span class="built_in">this</span>.handlers[id] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">fn(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="19-hasOwn"><a href="#19-hasOwn" class="headerlink" title="19. hasOwn"></a>19. hasOwn</h1><blockquote>
<p>检测是否是自己的属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hasOwnProperty.call(obj, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hasOwnProperty.call(obj, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(hasOwn(obj, <span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(hasOwn(obj, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h1 id="20-cached"><a href="#20-cached" class="headerlink" title="20. cached"></a>20. cached</h1><blockquote>
<p>缓存</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">cachedFn</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hit = cached[str];</span><br><span class="line">    <span class="keyword">return</span> hit || (cache[str] = fn(str));</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="21-camelize"><a href="#21-camelize" class="headerlink" title="21. camelize"></a>21. camelize</h1><blockquote>
<p>连字符转小驼峰 如 on-click =&gt; onClick</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> camelizeRE = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line"><span class="keyword">var</span> camelize = cached(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span> (<span class="params">_, c</span>) </span>&#123; <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">&#x27;&#x27;</span> &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>\w 表示 [0-9a-zA-Z_]。表示数字、大小写字母和下划线。 </p>
</li>
<li><p>```javascript<br>String.prototype.replace(regexp | substr, newSubStr|function)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   我们来重点看一下第二个参数中的`function` 中的参数 </span><br><span class="line"></span><br><span class="line">   [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0)</span><br><span class="line"></span><br><span class="line">   - `match`</span><br><span class="line"></span><br><span class="line">   - `p1,p2, ...` 假如replace()方法的第一个参数是一个[`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp) 对象，则代表第n个括号匹配的字符串。如果是用 `/(\a+)(\b+)/` 这个来匹配，`p1` 就是匹配的 `\a+`，`p2` 就是匹配的 `\b+`。</span><br><span class="line"></span><br><span class="line">     &gt; 因此，在这里，_ 的值是 -c,  c 的值 是 c</span><br><span class="line"></span><br><span class="line">   - ...</span><br><span class="line"></span><br><span class="line"># 22. capitalize</span><br><span class="line"></span><br><span class="line">&gt; 首字母转大写</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var capitalize = cached(function (str) &#123;</span><br><span class="line">  return str.charAt(0).toUpperCase() + str.slice(1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="23-hyphenate"><a href="#23-hyphenate" class="headerlink" title="23. hyphenate"></a>23. hyphenate</h1><blockquote>
<p>小驼峰转连字符 onClick =&gt; on-click</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hyphenateRE = <span class="regexp">/\B([A-Z])/g</span>;</span><br><span class="line"><span class="keyword">var</span> hyphenate = cached(<span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(hyphenateRE, <span class="string">&#x27;-$1&#x27;</span>).toLowerCase();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="24-polyfillBind"><a href="#24-polyfillBind" class="headerlink" title="24. polyfillBind"></a>24. polyfillBind</h1><blockquote>
<p> bind垫片 兼容了老版本浏览器不支持原生的bind函数。同时兼容写法，对参数的多少做出了判断，使用call和apply实现。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">polyfillBind</span>(<span class="params">fn, ctx</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">boundFn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l = <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">      ? l &gt; <span class="number">1</span></span><br><span class="line">        ? fn.apply(ctx, <span class="built_in">arguments</span>)</span><br><span class="line">        : fn.call(ctx, a)</span><br><span class="line">      : fn.call(ctx)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  boundFn._length = fn.length;</span><br><span class="line">  <span class="keyword">return</span> boundFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nativeBind</span>(<span class="params">fn, ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.bind(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.bind</span><br><span class="line">  ? nativeBind</span><br><span class="line">  : polyfillBind;</span><br></pre></td></tr></table></figure>

<h1 id="25-toArray"><a href="#25-toArray" class="headerlink" title="25. toArray"></a>25. toArray</h1><blockquote>
<p>把类数组转成真正的数组， 支持从指定位置开始转化，默认从0开始。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">list, start</span>) </span>&#123;</span><br><span class="line">  start = start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> i = list.length - start;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="built_in">Array</span>(i);</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    ret[i] = list[i + start];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = toArray(<span class="built_in">arguments</span>); </span><br><span class="line">  <span class="built_in">console</span>.log(args); <span class="comment">// 1, 2, 3, 4, 5</span></span><br><span class="line">  <span class="keyword">var</span> args2 = toArray(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(args2); <span class="comment">// 3, 4, 5</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h1 id="26-extend"><a href="#26-extend" class="headerlink" title="26. extend"></a>26. extend</h1><blockquote>
<p>合并对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">to, _from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _from) &#123;</span><br><span class="line">    to[key] = _from[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;lily&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> data2 = extend(data, &#123; <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;lily1&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// &#123; age: &#x27;18&#x27;, name: &#x27;lily1&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(data2); <span class="comment">// &#123; age: &#x27;18&#x27;, name: &#x27;lily1&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(data === data2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="27-toObject"><a href="#27-toObject" class="headerlink" title="27. toObject"></a>27. toObject</h1><blockquote>
<p>转对象， 传入的是个数组，后面的元素会覆盖前面的元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toObject</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i]) &#123;</span><br><span class="line">      extend(res, arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line">toObject([<span class="string">&#x27;笑嘻嘻&#x27;</span>,<span class="string">&#x27;哈哈呵呵&#x27;</span>]); <span class="comment">// 哈哈呵呵</span></span><br></pre></td></tr></table></figure>

<h1 id="28-noop"><a href="#28-noop" class="headerlink" title="28. noop"></a>28. noop</h1><blockquote>
<p>空函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params">a, b, c</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="29-no"><a href="#29-no" class="headerlink" title="29. no"></a>29. no</h1><blockquote>
<p>一直返回false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> no = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="30-identity"><a href="#30-identity" class="headerlink" title="30. identity"></a>30. identity</h1><blockquote>
<p>返回参数本身</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identity = <span class="function"><span class="keyword">function</span>(<span class="params">_</span>) </span>&#123;  <span class="keyword">return</span> _; &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="31-genStaticKeys"><a href="#31-genStaticKeys" class="headerlink" title="31. genStaticKeys"></a>31. genStaticKeys</h1><blockquote>
<p>生成静态属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genStaticKeys</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> modules.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">keys, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> keys.concat(m.staticKeys || [])</span><br><span class="line">  &#125;, []).join(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="32-looseEqual"><a href="#32-looseEqual" class="headerlink" title="32. looseEqual"></a>32. looseEqual</h1><blockquote>
<p>宽松相等</p>
</blockquote>
<p>由于数组、对象等是引用类型，所以两个内容看起来相等，严格相等都是不相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a == b; <span class="comment">// false</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>所以该函数是对数组、日期、对象进行递归比对。如果内容完全相等则宽松相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseEqual</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;;</span><br><span class="line">  <span class="keyword">var</span> isObjectA = isObject(a);</span><br><span class="line">  <span class="keyword">var</span> isObjectB = isObject(b);</span><br><span class="line">  <span class="keyword">if</span> (isObjectA &amp;&amp; isObjectB) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> isArrayA = <span class="built_in">Array</span>.isArray(a);</span><br><span class="line">      <span class="keyword">var</span> isArrayB = <span class="built_in">Array</span>.isArray(b);</span><br><span class="line">      <span class="keyword">if</span> (isArrayA &amp;&amp; isArrayB) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.length === b.length &amp;&amp; a.every(<span class="function"><span class="keyword">function</span> (<span class="params">e, i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> looseEqual(e, b[i])</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; b <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.getTime() === b.getTime();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isArrayA &amp;&amp; !isArrayB) &#123;</span><br><span class="line">        <span class="keyword">var</span> keysA = <span class="built_in">Object</span>.keys(a);</span><br><span class="line">        <span class="keyword">var</span> keysB = <span class="built_in">Object</span>.keys(b);</span><br><span class="line">        <span class="keyword">return</span> keysA.length === keysB.length &amp;&amp; keysA.every(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> looseEqual(a[key], b[key])</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isObjectA &amp;&amp; !isObjectB) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(a) === <span class="built_in">String</span>(b);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="33-looseIndexOf"><a href="#33-looseIndexOf" class="headerlink" title="33. looseIndexOf"></a>33. looseIndexOf</h1><blockquote>
<p>宽松的in de x O f</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseIndexOf</span>(<span class="params">arr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="function"><span class="title">looseEqual</span>(<span class="params">arr[i], val</span>)</span> &#123; <span class="keyword">return</span> i &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="34-once"><a href="#34-once" class="headerlink" title="34. once"></a>34. once</h1><blockquote>
<p>利用闭包特性，存储状态，实现函数只执行一次</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!called) &#123; </span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      fn.apply(called, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码阅读</category>
      </categories>
  </entry>
  <entry>
    <title>最长递增子序列</title>
    <url>/2022/01/18/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>[来源] 🔗<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>
<p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长递增子序列是 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>]，因此长度为 <span class="number">4</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><ol>
<li>首先我们先考虑直接的动态规划，初始化dp数组为new Array(len).fill(1)。<ol>
<li>用1填充的原因是因为任意一个数字都可以组成一个长度，所以最短初始值为1。</li>
</ol>
</li>
<li>那么现在我们的数组将是如下情况</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始情况</span></span><br><span class="line">nums = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">dp = [<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,  <span class="number">1</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>计算最长递增子序列肯定要遍历数组的，而且<br> 3.1. 计算最长，我们肯定要使用到Math.max；<br> 3.2. 比较前后两个数的大小，我们先姑且的使用两层for循环吧 简单而粗暴</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> i = <span class="number">1</span>, j = <span class="number">0</span></span><br><span class="line">nums[i] &lt; nums[j]  <span class="keyword">continue</span>;</span><br><span class="line"><span class="number">2.</span> i = <span class="number">2</span>, j <span class="keyword">from</span> <span class="number">0</span> </span><br><span class="line">  <span class="number">2.1</span> j = <span class="number">0</span></span><br><span class="line">  nums[i] &lt; nums[j] <span class="keyword">continue</span>; dp = [<span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>]</span><br><span class="line">  <span class="number">2.2</span> j = <span class="number">1</span></span><br><span class="line">  nums[i] &lt; nums[j] <span class="keyword">continue</span>; dp = [<span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>]</span><br><span class="line"><span class="number">3.</span> i = <span class="number">3</span>, j <span class="keyword">from</span> <span class="number">0</span></span><br><span class="line">  <span class="number">3.1</span> <span class="number">3.2</span> 如上 dp = [<span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>]</span><br><span class="line">  <span class="number">3.3</span> j = <span class="number">2</span></span><br><span class="line">  nums[i] &gt; nums[j]  dp[i] = <span class="built_in">Math</span>.max(dp[j] + <span class="number">1</span>, dp[i]); dp = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, ..<span class="number">.1</span>]</span><br><span class="line">以此类推....</span><br></pre></td></tr></table></figure>

<h1 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLIS</span>(<span class="params">nums: number[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.length;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">Math</span>.max(dp[j] + <span class="number">1</span>, dp[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">Math</span>.max(dp[i], ans)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
